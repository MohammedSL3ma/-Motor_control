
ServoMotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000040de  00004172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000aa  008000aa  000041bc  2**0
                  ALLOC
  3 .stab         00004278  00000000  00000000  000041bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003ce1  00000000  00000000  00008434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000c115  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c275  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c404  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000104cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0001064c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001090e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_1>
       8:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__vector_2>
       c:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__vector_3>
      10:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_4>
      14:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_5>
      18:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_6>
      1c:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_7>
      20:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_8>
      24:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_9>
      28:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__vector_10>
      2c:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <main>
      8a:	0c 94 6d 20 	jmp	0x40da	; 0x40da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 20 	jmp	0x406c	; 0x406c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 20 	jmp	0x406c	; 0x406c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e8       	ldi	r22, 0x81	; 129
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5e 20 	jmp	0x40bc	; 0x40bc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 46 20 	jmp	0x408c	; 0x408c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Set_CallBack_TIMER_0_OVF_INT>:




void Set_CallBack_TIMER_0_OVF_INT(void (*ptr)(void))
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Set_CallBack_TIMER_0_OVF_INT+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <Set_CallBack_TIMER_0_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_0_OVF_INT = ptr;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	90 93 ad 00 	sts	0x00AD, r25
     cbc:	80 93 ac 00 	sts	0x00AC, r24
	}
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <__vector_11>:
void __vector_11 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_11 (void)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_0_OVF_INT != NULL)
     cf4:	80 91 ac 00 	lds	r24, 0x00AC
     cf8:	90 91 ad 00 	lds	r25, 0x00AD
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	29 f0       	breq	.+10     	; 0xd0a <__vector_11+0x40>
	{
		TIMER_ISR.TIMER_0_OVF_INT();
     d00:	e0 91 ac 00 	lds	r30, 0x00AC
     d04:	f0 91 ad 00 	lds	r31, 0x00AD
     d08:	09 95       	icall
	}
}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	bf 91       	pop	r27
     d14:	af 91       	pop	r26
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	7f 91       	pop	r23
     d1c:	6f 91       	pop	r22
     d1e:	5f 91       	pop	r21
     d20:	4f 91       	pop	r20
     d22:	3f 91       	pop	r19
     d24:	2f 91       	pop	r18
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <Set_CallBack_TIMER_0_OC_INT>:

void Set_CallBack_TIMER_0_OC_INT(void (*ptr)(void))
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <Set_CallBack_TIMER_0_OC_INT+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	9a 83       	std	Y+2, r25	; 0x02
     d3c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	31 f0       	breq	.+12     	; 0xd52 <Set_CallBack_TIMER_0_OC_INT+0x22>
	{
		TIMER_ISR.TIMER_0_OC_INT = ptr;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	90 93 af 00 	sts	0x00AF, r25
     d4e:	80 93 ae 00 	sts	0x00AE, r24
	}
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <__vector_10>:
void __vector_10 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_10 (void)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_0_OC_INT != NULL)
     d86:	80 91 ae 00 	lds	r24, 0x00AE
     d8a:	90 91 af 00 	lds	r25, 0x00AF
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	29 f0       	breq	.+10     	; 0xd9c <__vector_10+0x40>
	{
		TIMER_ISR.TIMER_0_OC_INT();
     d92:	e0 91 ae 00 	lds	r30, 0x00AE
     d96:	f0 91 af 00 	lds	r31, 0x00AF
     d9a:	09 95       	icall
	}
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <Set_CallBack_TIMER_1_OVF_INT>:




void Set_CallBack_TIMER_1_OVF_INT(void (*ptr)(void))
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <Set_CallBack_TIMER_1_OVF_INT+0x6>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	31 f0       	breq	.+12     	; 0xde4 <Set_CallBack_TIMER_1_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OVF_INT = ptr;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	90 93 b1 00 	sts	0x00B1, r25
     de0:	80 93 b0 00 	sts	0x00B0, r24
	}
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <__vector_9>:
void __vector_9 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OVF_INT != NULL)
     e18:	80 91 b0 00 	lds	r24, 0x00B0
     e1c:	90 91 b1 00 	lds	r25, 0x00B1
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	29 f0       	breq	.+10     	; 0xe2e <__vector_9+0x40>
	{
		TIMER_ISR.TIMER_1_OVF_INT();
     e24:	e0 91 b0 00 	lds	r30, 0x00B0
     e28:	f0 91 b1 00 	lds	r31, 0x00B1
     e2c:	09 95       	icall
	}
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <Set_CallBack_TIMER_1_OCA_INT>:

void Set_CallBack_TIMER_1_OCA_INT(void (*ptr)(void))
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <Set_CallBack_TIMER_1_OCA_INT+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	31 f0       	breq	.+12     	; 0xe76 <Set_CallBack_TIMER_1_OCA_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OCA_INT = ptr;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	90 93 b3 00 	sts	0x00B3, r25
     e72:	80 93 b2 00 	sts	0x00B2, r24
	}
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <__vector_7>:
void __vector_7 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_7 (void)
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	4f 93       	push	r20
     e90:	5f 93       	push	r21
     e92:	6f 93       	push	r22
     e94:	7f 93       	push	r23
     e96:	8f 93       	push	r24
     e98:	9f 93       	push	r25
     e9a:	af 93       	push	r26
     e9c:	bf 93       	push	r27
     e9e:	ef 93       	push	r30
     ea0:	ff 93       	push	r31
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OCA_INT != NULL)
     eaa:	80 91 b2 00 	lds	r24, 0x00B2
     eae:	90 91 b3 00 	lds	r25, 0x00B3
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	29 f0       	breq	.+10     	; 0xec0 <__vector_7+0x40>
	{
		TIMER_ISR.TIMER_1_OCA_INT();
     eb6:	e0 91 b2 00 	lds	r30, 0x00B2
     eba:	f0 91 b3 00 	lds	r31, 0x00B3
     ebe:	09 95       	icall
	}
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <Set_CallBack_TIMER_1_OCB_INT>:


void Set_CallBack_TIMER_1_OCB_INT(void (*ptr)(void))
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <Set_CallBack_TIMER_1_OCB_INT+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	31 f0       	breq	.+12     	; 0xf08 <Set_CallBack_TIMER_1_OCB_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OCB_INT = ptr;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	90 93 b5 00 	sts	0x00B5, r25
     f04:	80 93 b4 00 	sts	0x00B4, r24
	}
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <__vector_8>:
void __vector_8 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_8 (void)
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OCB_INT != NULL)
     f3c:	80 91 b4 00 	lds	r24, 0x00B4
     f40:	90 91 b5 00 	lds	r25, 0x00B5
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	29 f0       	breq	.+10     	; 0xf52 <__vector_8+0x40>
	{
		TIMER_ISR.TIMER_1_OCB_INT();
     f48:	e0 91 b4 00 	lds	r30, 0x00B4
     f4c:	f0 91 b5 00 	lds	r31, 0x00B5
     f50:	09 95       	icall
	}
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <Set_CallBack_TIMER_1_CAPT_INT>:


void Set_CallBack_TIMER_1_CAPT_INT(void (*ptr)(void))
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <Set_CallBack_TIMER_1_CAPT_INT+0x6>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	31 f0       	breq	.+12     	; 0xf9a <Set_CallBack_TIMER_1_CAPT_INT+0x22>
	{
		TIMER_ISR.TIMER_1_CAPT_INT = ptr;
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	90 93 b7 00 	sts	0x00B7, r25
     f96:	80 93 b6 00 	sts	0x00B6, r24
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <__vector_6>:
void __vector_6 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_6 (void)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	2f 93       	push	r18
     fb0:	3f 93       	push	r19
     fb2:	4f 93       	push	r20
     fb4:	5f 93       	push	r21
     fb6:	6f 93       	push	r22
     fb8:	7f 93       	push	r23
     fba:	8f 93       	push	r24
     fbc:	9f 93       	push	r25
     fbe:	af 93       	push	r26
     fc0:	bf 93       	push	r27
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_CAPT_INT != NULL)
     fce:	80 91 b6 00 	lds	r24, 0x00B6
     fd2:	90 91 b7 00 	lds	r25, 0x00B7
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <__vector_6+0x40>
	{
		TIMER_ISR.TIMER_1_CAPT_INT();
     fda:	e0 91 b6 00 	lds	r30, 0x00B6
     fde:	f0 91 b7 00 	lds	r31, 0x00B7
     fe2:	09 95       	icall
	}
}
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <Set_CallBack_TIMER_2_OVF_INT>:
 */



void Set_CallBack_TIMER_2_OVF_INT(void (*ptr)(void))
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <Set_CallBack_TIMER_2_OVF_INT+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	31 f0       	breq	.+12     	; 0x102c <Set_CallBack_TIMER_2_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_2_OVF_INT = ptr;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	90 93 b9 00 	sts	0x00B9, r25
    1028:	80 93 b8 00 	sts	0x00B8, r24
	}
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <__vector_5>:
void __vector_5 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_5 (void)
{
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_2_OVF_INT != NULL)
    1060:	80 91 b8 00 	lds	r24, 0x00B8
    1064:	90 91 b9 00 	lds	r25, 0x00B9
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	29 f0       	breq	.+10     	; 0x1076 <__vector_5+0x40>
	{
		TIMER_ISR.TIMER_2_OVF_INT();
    106c:	e0 91 b8 00 	lds	r30, 0x00B8
    1070:	f0 91 b9 00 	lds	r31, 0x00B9
    1074:	09 95       	icall
	}
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <Set_CallBack_TIMER_2_OC_INT>:


void Set_CallBack_TIMER_2_OC_INT(void (*ptr)(void))
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <Set_CallBack_TIMER_2_OC_INT+0x6>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	31 f0       	breq	.+12     	; 0x10be <Set_CallBack_TIMER_2_OC_INT+0x22>
	{
		TIMER_ISR.TIMER_2_OC_INT = ptr;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	90 93 bb 00 	sts	0x00BB, r25
    10ba:	80 93 ba 00 	sts	0x00BA, r24
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <__vector_4>:
void __vector_4 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_4 (void)
{
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_2_OC_INT != NULL)
    10f2:	80 91 ba 00 	lds	r24, 0x00BA
    10f6:	90 91 bb 00 	lds	r25, 0x00BB
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	29 f0       	breq	.+10     	; 0x1108 <__vector_4+0x40>
	{
		TIMER_ISR.TIMER_2_OC_INT();
    10fe:	e0 91 ba 00 	lds	r30, 0x00BA
    1102:	f0 91 bb 00 	lds	r31, 0x00BB
    1106:	09 95       	icall
	}
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <Timer_init>:
 */



void Timer_init(timer_config_type *timer_config_ptr)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <Timer_init+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <Timer_init+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
	Timer_DeInit(timer_config_ptr->timer);/*deinitialize the desired timer */
    113e:	e9 81       	ldd	r30, Y+1	; 0x01
    1140:	fa 81       	ldd	r31, Y+2	; 0x02
    1142:	81 85       	ldd	r24, Z+9	; 0x09
    1144:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Timer_DeInit>
	switch(timer_config_ptr->timer)
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	81 85       	ldd	r24, Z+9	; 0x09
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3c 83       	std	Y+4, r19	; 0x04
    1154:	2b 83       	std	Y+3, r18	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <Timer_init+0x34>
    1160:	4e c0       	rjmp	.+156    	; 0x11fe <Timer_init+0xd0>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <Timer_init+0x40>
    116c:	b1 c0       	rjmp	.+354    	; 0x12d0 <Timer_init+0x1a2>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	09 f0       	breq	.+2      	; 0x1178 <Timer_init+0x4a>
    1176:	ee c0       	rjmp	.+476    	; 0x1354 <Timer_init+0x226>
		 * FOC0= 0 ; because non_pwm mode
		 * select a prescaler
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * */
		TCNT0_REG = timer_config_ptr->initial_value; /*Set Timer0 initial value to 0*/
    1178:	a2 e5       	ldi	r26, 0x52	; 82
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	84 81       	ldd	r24, Z+4	; 0x04
    1182:	95 81       	ldd	r25, Z+5	; 0x05
    1184:	8c 93       	st	X, r24
		SET_BIT(TCC0_REG,7)   ; /* non-pwm mode*/
    1186:	a3 e5       	ldi	r26, 0x53	; 83
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e3 e5       	ldi	r30, 0x53	; 83
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	80 68       	ori	r24, 0x80	; 128
    1192:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	80 85       	ldd	r24, Z+8	; 0x08
    119a:	88 23       	and	r24, r24
    119c:	41 f4       	brne	.+16     	; 0x11ae <Timer_init+0x80>
		{
			SET_BIT(TIMSK_REG,0)    ;/* Enable Timer0 over flow Interrupt*/
    119e:	a9 e5       	ldi	r26, 0x59	; 89
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e9 e5       	ldi	r30, 0x59	; 89
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	8c 93       	st	X, r24
    11ac:	1a c0       	rjmp	.+52     	; 0x11e2 <Timer_init+0xb4>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	80 85       	ldd	r24, Z+8	; 0x08
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	a9 f4       	brne	.+42     	; 0x11e2 <Timer_init+0xb4>
		{
			OCR0_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    11b8:	ac e5       	ldi	r26, 0x5C	; 92
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	8c 93       	st	X, r24
			SET_BIT(TCC0_REG,3)    ; /* CTC mode */
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 60       	ori	r24, 0x08	; 8
    11d2:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,1)    ; /* Enable CTC mode interrupt */
    11d4:	a9 e5       	ldi	r26, 0x59	; 89
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e9 e5       	ldi	r30, 0x59	; 89
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	82 60       	ori	r24, 0x02	; 2
    11e0:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC0_REG=(TCC0_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111 );
    11e2:	a3 e5       	ldi	r26, 0x53	; 83
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e3 e5       	ldi	r30, 0x53	; 83
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	98 2f       	mov	r25, r24
    11ee:	98 7f       	andi	r25, 0xF8	; 248
    11f0:	e9 81       	ldd	r30, Y+1	; 0x01
    11f2:	fa 81       	ldd	r31, Y+2	; 0x02
    11f4:	86 81       	ldd	r24, Z+6	; 0x06
    11f6:	87 70       	andi	r24, 0x07	; 7
    11f8:	89 2b       	or	r24, r25
    11fa:	8c 93       	st	X, r24
    11fc:	ab c0       	rjmp	.+342    	; 0x1354 <Timer_init+0x226>
		break;
	case TIMER_1:
		TCNT1_REG = timer_config_ptr->initial_value;/*set timer1 initial value */
    11fe:	ac e4       	ldi	r26, 0x4C	; 76
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	84 81       	ldd	r24, Z+4	; 0x04
    1208:	95 81       	ldd	r25, Z+5	; 0x05
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	9c 93       	st	X, r25
    120e:	8e 93       	st	-X, r24
		SET_BIT(TCC1A_REG,3)   ;/*non-pwm mode */
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 60       	ori	r24, 0x08	; 8
    121c:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	80 85       	ldd	r24, Z+8	; 0x08
    1224:	88 23       	and	r24, r24
    1226:	41 f4       	brne	.+16     	; 0x1238 <Timer_init+0x10a>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM12)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
			 */
			/**************************************************************************/
			SET_BIT(TIMSK_REG,2)    ;/*Enable Timer1 over flow Interrupt*/
    1228:	a9 e5       	ldi	r26, 0x59	; 89
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e9 e5       	ldi	r30, 0x59	; 89
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	84 60       	ori	r24, 0x04	; 4
    1234:	8c 93       	st	X, r24
    1236:	3e c0       	rjmp	.+124    	; 0x12b4 <Timer_init+0x186>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1238:	e9 81       	ldd	r30, Y+1	; 0x01
    123a:	fa 81       	ldd	r31, Y+2	; 0x02
    123c:	80 85       	ldd	r24, Z+8	; 0x08
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	c9 f5       	brne	.+114    	; 0x12b4 <Timer_init+0x186>
		{
			if(timer_config_ptr->channels_number == CHANNEL_1A)
    1242:	e9 81       	ldd	r30, Y+1	; 0x01
    1244:	fa 81       	ldd	r31, Y+2	; 0x02
    1246:	82 85       	ldd	r24, Z+10	; 0x0a
    1248:	88 23       	and	r24, r24
    124a:	c1 f4       	brne	.+48     	; 0x127c <Timer_init+0x14e>
			{
				OCR1A_REG = timer_config_ptr->compared_value; /*Set timer1 Compare Value*/
    124c:	aa e4       	ldi	r26, 0x4A	; 74
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
				SET_BIT(TCC1B_REG,3)    ;/* enable CTC  mode*/
    125e:	ae e4       	ldi	r26, 0x4E	; 78
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ee e4       	ldi	r30, 0x4E	; 78
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 60       	ori	r24, 0x08	; 8
    126a:	8c 93       	st	X, r24
				SET_BIT(TIMSK_REG,4)    ; /* enable CTC channel A Interrupt*/
    126c:	a9 e5       	ldi	r26, 0x59	; 89
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e9 e5       	ldi	r30, 0x59	; 89
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 61       	ori	r24, 0x10	; 16
    1278:	8c 93       	st	X, r24
    127a:	1c c0       	rjmp	.+56     	; 0x12b4 <Timer_init+0x186>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
				 */
				/**************************************************************************/
			}
			else if (timer_config_ptr->channels_number==CHANNEL_1B)
    127c:	e9 81       	ldd	r30, Y+1	; 0x01
    127e:	fa 81       	ldd	r31, Y+2	; 0x02
    1280:	82 85       	ldd	r24, Z+10	; 0x0a
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	b9 f4       	brne	.+46     	; 0x12b4 <Timer_init+0x186>
			{
				SET_BIT(TCC1A_REG,2)   ;/*non-pwm mode channel B*/
    1286:	af e4       	ldi	r26, 0x4F	; 79
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ef e4       	ldi	r30, 0x4F	; 79
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	84 60       	ori	r24, 0x04	; 4
    1292:	8c 93       	st	X, r24
				OCR1B_REG = timer_config_ptr->compared_value_B_channel; /*Set timer1 Compare Value*/
    1294:	a8 e4       	ldi	r26, 0x48	; 72
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e9 81       	ldd	r30, Y+1	; 0x01
    129a:	fa 81       	ldd	r31, Y+2	; 0x02
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	9c 93       	st	X, r25
    12a4:	8e 93       	st	-X, r24
				SET_BIT(TIMSK_REG,3);/* enable CTC channel B Interrupt*/
    12a6:	a9 e5       	ldi	r26, 0x59	; 89
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 60       	ori	r24, 0x08	; 8
    12b2:	8c 93       	st	X, r24
			}
		}

		TCC1B_REG=(TCC1B_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111);/*select the prescaler */
    12b4:	ae e4       	ldi	r26, 0x4E	; 78
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ee e4       	ldi	r30, 0x4E	; 78
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	98 2f       	mov	r25, r24
    12c0:	98 7f       	andi	r25, 0xF8	; 248
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	86 81       	ldd	r24, Z+6	; 0x06
    12c8:	87 70       	andi	r24, 0x07	; 7
    12ca:	89 2b       	or	r24, r25
    12cc:	8c 93       	st	X, r24
    12ce:	42 c0       	rjmp	.+132    	; 0x1354 <Timer_init+0x226>
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * and disable Timer0 compare Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * and disable Timer0 normal Interrupt ad select the state of OSR0 pin
		 * */
		TCNT2_REG = timer_config_ptr->initial_value; /*Set Timer2 initial value */
    12d0:	a4 e4       	ldi	r26, 0x44	; 68
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	84 81       	ldd	r24, Z+4	; 0x04
    12da:	95 81       	ldd	r25, Z+5	; 0x05
    12dc:	8c 93       	st	X, r24
		SET_BIT(TCC2_REG,7); /* non-pwm mode*/
    12de:	a5 e4       	ldi	r26, 0x45	; 69
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e4       	ldi	r30, 0x45	; 69
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	80 85       	ldd	r24, Z+8	; 0x08
    12f2:	88 23       	and	r24, r24
    12f4:	41 f4       	brne	.+16     	; 0x1306 <Timer_init+0x1d8>
			/*Normal mode*/
			/*
			CLEAR_BIT(TCCR2,WGM21)  ;
			CLEAR_BIT(TCCR2,WGM20)  ;
			 */
			SET_BIT(TIMSK_REG,6)    ;/* Enable Timer0 over flow Interrupt*/
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	8c 93       	st	X, r24
    1304:	1a c0       	rjmp	.+52     	; 0x133a <Timer_init+0x20c>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1306:	e9 81       	ldd	r30, Y+1	; 0x01
    1308:	fa 81       	ldd	r31, Y+2	; 0x02
    130a:	80 85       	ldd	r24, Z+8	; 0x08
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a9 f4       	brne	.+42     	; 0x133a <Timer_init+0x20c>
		{
			OCR2_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    1310:	a3 e4       	ldi	r26, 0x43	; 67
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 81       	ldd	r30, Y+1	; 0x01
    1316:	fa 81       	ldd	r31, Y+2	; 0x02
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	8c 93       	st	X, r24
			SET_BIT(TCC2_REG,3)    ; /* CTC mode */
    131e:	a5 e4       	ldi	r26, 0x45	; 69
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e4       	ldi	r30, 0x45	; 69
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	88 60       	ori	r24, 0x08	; 8
    132a:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,7)    ; /* enable CTC Interrupt*/
    132c:	a9 e5       	ldi	r26, 0x59	; 89
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	80 68       	ori	r24, 0x80	; 128
    1338:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC2_REG=(TCC2_REG &0b11111000)|(timer_config_ptr->T2_used_freq & 0b00000111 );
    133a:	a5 e4       	ldi	r26, 0x45	; 69
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e4       	ldi	r30, 0x45	; 69
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	98 2f       	mov	r25, r24
    1346:	98 7f       	andi	r25, 0xF8	; 248
    1348:	e9 81       	ldd	r30, Y+1	; 0x01
    134a:	fa 81       	ldd	r31, Y+2	; 0x02
    134c:	87 81       	ldd	r24, Z+7	; 0x07
    134e:	87 70       	andi	r24, 0x07	; 7
    1350:	89 2b       	or	r24, r25
    1352:	8c 93       	st	X, r24
		break;
	case ALL:
		break;
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <change_compared_and_duty_value>:
 * it assign the compared value or duty cycle value for
 * every desired timer
 * */

void change_compared_and_duty_value(timer_config_type * config_ptr)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <change_compared_and_duty_value+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <change_compared_and_duty_value+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->timer)
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	81 85       	ldd	r24, Z+9	; 0x09
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	89 f0       	breq	.+34     	; 0x13ac <change_compared_and_duty_value+0x4a>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	29 f1       	breq	.+74     	; 0x13de <change_compared_and_duty_value+0x7c>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	41 f5       	brne	.+80     	; 0x13ec <change_compared_and_duty_value+0x8a>
	{
	case TIMER_0:
		OCR0_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    139c:	ac e5       	ldi	r26, 0x5C	; 92
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 81       	ldd	r30, Y+1	; 0x01
    13a2:	fa 81       	ldd	r31, Y+2	; 0x02
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	8c 93       	st	X, r24
    13aa:	20 c0       	rjmp	.+64     	; 0x13ec <change_compared_and_duty_value+0x8a>
		break ;
	case TIMER_1:
		OCR1A_REG = config_ptr->compared_value; /*Set timer1 Compare Value*/
    13ac:	aa e4       	ldi	r26, 0x4A	; 74
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e9 81       	ldd	r30, Y+1	; 0x01
    13b2:	fa 81       	ldd	r31, Y+2	; 0x02
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	9c 93       	st	X, r25
    13bc:	8e 93       	st	-X, r24
		if (config_ptr->channels_number==CHANNEL_1B)
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	82 85       	ldd	r24, Z+10	; 0x0a
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 f4       	brne	.+36     	; 0x13ec <change_compared_and_duty_value+0x8a>
		{
			OCR1B_REG = config_ptr->compared_value_B_channel; /*Set timer1 B Compare Value*/
    13c8:	e8 e4       	ldi	r30, 0x48	; 72
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	a9 81       	ldd	r26, Y+1	; 0x01
    13ce:	ba 81       	ldd	r27, Y+2	; 0x02
    13d0:	12 96       	adiw	r26, 0x02	; 2
    13d2:	8d 91       	ld	r24, X+
    13d4:	9c 91       	ld	r25, X
    13d6:	13 97       	sbiw	r26, 0x03	; 3
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <change_compared_and_duty_value+0x8a>
		}
		break ;
	case TIMER_2:
		OCR2_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    13de:	a3 e4       	ldi	r26, 0x43	; 67
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	8c 93       	st	X, r24
		break ;
	}
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <Timer_DeInit>:

/*Description
 * this function is responsible for reset all timer registers
 * */
void Timer_DeInit(TIMER_e timer)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <Timer_DeInit+0x6>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3b 83       	std	Y+3, r19	; 0x03
    1410:	2a 83       	std	Y+2, r18	; 0x02
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	19 f1       	breq	.+70     	; 0x1462 <Timer_DeInit+0x68>
    141c:	2a 81       	ldd	r18, Y+2	; 0x02
    141e:	3b 81       	ldd	r19, Y+3	; 0x03
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <Timer_DeInit+0x36>
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	61 f0       	breq	.+24     	; 0x1446 <Timer_DeInit+0x4c>
    142e:	56 c0       	rjmp	.+172    	; 0x14dc <Timer_DeInit+0xe2>
    1430:	2a 81       	ldd	r18, Y+2	; 0x02
    1432:	3b 81       	ldd	r19, Y+3	; 0x03
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	31 f1       	breq	.+76     	; 0x1486 <Timer_DeInit+0x8c>
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	79 f1       	breq	.+94     	; 0x14a2 <Timer_DeInit+0xa8>
    1444:	4b c0       	rjmp	.+150    	; 0x14dc <Timer_DeInit+0xe2>
	{
	case TIMER_0:
		TCC0_REG= 0; /* clear control register*/
    1446:	e3 e5       	ldi	r30, 0x53	; 83
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer 0*/
    144c:	e2 e5       	ldi	r30, 0x52	; 82
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11111100);/*Disable module interrupt interrupt*/
    1452:	a9 e5       	ldi	r26, 0x59	; 89
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e9 e5       	ldi	r30, 0x59	; 89
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8c 7f       	andi	r24, 0xFC	; 252
    145e:	8c 93       	st	X, r24
    1460:	3d c0       	rjmp	.+122    	; 0x14dc <Timer_DeInit+0xe2>
		break;
	case TIMER_1:
		TCC1A_REG=0; /* clear control register*/
    1462:	ef e4       	ldi	r30, 0x4F	; 79
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	10 82       	st	Z, r1
		TCC1B_REG=0 ;
    1468:	ee e4       	ldi	r30, 0x4E	; 78
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer 0*/
    146e:	ec e4       	ldi	r30, 0x4C	; 76
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	11 82       	std	Z+1, r1	; 0x01
    1474:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11100011);/*Disable module interrupt interrupt*/
    1476:	a9 e5       	ldi	r26, 0x59	; 89
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e9 e5       	ldi	r30, 0x59	; 89
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	83 7e       	andi	r24, 0xE3	; 227
    1482:	8c 93       	st	X, r24
    1484:	2b c0       	rjmp	.+86     	; 0x14dc <Timer_DeInit+0xe2>
		break;
	case TIMER_2:
		TCC2_REG= 0; /* clear control register*/
    1486:	e5 e4       	ldi	r30, 0x45	; 69
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer 0*/
    148c:	e4 e4       	ldi	r30, 0x44	; 68
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b00111111);/*Disable module interrupt interrupt*/
    1492:	a9 e5       	ldi	r26, 0x59	; 89
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e9 e5       	ldi	r30, 0x59	; 89
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8f 73       	andi	r24, 0x3F	; 63
    149e:	8c 93       	st	X, r24
    14a0:	1d c0       	rjmp	.+58     	; 0x14dc <Timer_DeInit+0xe2>
		break;
	case ALL:
		TIMSK_REG=(TIMSK_REG &0b00100000);/*Disable all timers modules interrupt interrupt*/
    14a2:	a9 e5       	ldi	r26, 0x59	; 89
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e9 e5       	ldi	r30, 0x59	; 89
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 72       	andi	r24, 0x20	; 32
    14ae:	8c 93       	st	X, r24
		/*===============Deinitialize Timer0=============================*/
		TCC0_REG= 0; /* clear control register*/
    14b0:	e3 e5       	ldi	r30, 0x53	; 83
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer */
    14b6:	e2 e5       	ldi	r30, 0x52	; 82
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	10 82       	st	Z, r1
		/*===============Deinitialize Timer1=============================*/
		TCC1A_REG= 0; /* clear A control register*/
    14bc:	ef e4       	ldi	r30, 0x4F	; 79
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	10 82       	st	Z, r1
		TCC1B_REG= 0;/* clear B control register*/
    14c2:	ee e4       	ldi	r30, 0x4E	; 78
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer */
    14c8:	ec e4       	ldi	r30, 0x4C	; 76
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	11 82       	std	Z+1, r1	; 0x01
    14ce:	10 82       	st	Z, r1
		/*===============Deinitialize Timer2=============================*/
		TCC2_REG= 0; /* clear control register*/
    14d0:	e5 e4       	ldi	r30, 0x45	; 69
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer */
    14d6:	e4 e4       	ldi	r30, 0x44	; 68
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1
		break;
	}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <clear_timer>:
 * this func used to reset the timer to start count again from the beginning
 * we chose the timer to be cleared
 * */

void clear_timer(TIMER_e timer)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <clear_timer+0x6>
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3b 83       	std	Y+3, r19	; 0x03
    14fe:	2a 83       	std	Y+2, r18	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	c9 f0       	breq	.+50     	; 0x153c <clear_timer+0x54>
    150a:	2a 81       	ldd	r18, Y+2	; 0x02
    150c:	3b 81       	ldd	r19, Y+3	; 0x03
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <clear_timer+0x36>
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <clear_timer+0x4c>
    151c:	22 c0       	rjmp	.+68     	; 0x1562 <clear_timer+0x7a>
    151e:	2a 81       	ldd	r18, Y+2	; 0x02
    1520:	3b 81       	ldd	r19, Y+3	; 0x03
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	79 f0       	breq	.+30     	; 0x1546 <clear_timer+0x5e>
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	71 f0       	breq	.+28     	; 0x154e <clear_timer+0x66>
    1532:	17 c0       	rjmp	.+46     	; 0x1562 <clear_timer+0x7a>
	{
	case TIMER_0:
		TCNT0_REG = 0; /* Set Timer0 initial value to 0*/
    1534:	e2 e5       	ldi	r30, 0x52	; 82
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	10 82       	st	Z, r1
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <clear_timer+0x7a>
		break;
	case TIMER_1:
		TCNT1_REG = 0; /* Set Timer1 initial value to 0*/
    153c:	ec e4       	ldi	r30, 0x4C	; 76
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	11 82       	std	Z+1, r1	; 0x01
    1542:	10 82       	st	Z, r1
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <clear_timer+0x7a>
		break;
	case TIMER_2:
		TCNT2_REG = 0; /* Set Timer2 initial value to 0*/
    1546:	e4 e4       	ldi	r30, 0x44	; 68
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	10 82       	st	Z, r1
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <clear_timer+0x7a>
		break;
	case ALL:
		TCNT0_REG = 0;  /* Set Timer0 initial value to 0*/
    154e:	e2 e5       	ldi	r30, 0x52	; 82
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	10 82       	st	Z, r1
		TCNT1_REG = 0;  /* Set Timer1 initial value to 0*/
    1554:	ec e4       	ldi	r30, 0x4C	; 76
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	11 82       	std	Z+1, r1	; 0x01
    155a:	10 82       	st	Z, r1
		TCNT2_REG = 0;  /* Set Timer2 initial value to 0*/
    155c:	e4 e4       	ldi	r30, 0x44	; 68
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	10 82       	st	Z, r1
		break;
	default:
		break  ;
	}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <PWM_timers_init>:
 * this function is responsible for pwm init for the desired timer
 * it take a ptr to struct
 *
 * */
void PWM_timers_init(PWM_timers_config *timer_config)
{
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <PWM_timers_init+0xa>
    1578:	00 d0       	rcall	.+0      	; 0x157a <PWM_timers_init+0xc>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01

	switch (timer_config->timer)
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	81 85       	ldd	r24, Z+9	; 0x09
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <PWM_timers_init+0x2e>
    159a:	43 c0       	rjmp	.+134    	; 0x1622 <PWM_timers_init+0xb4>
    159c:	eb 81       	ldd	r30, Y+3	; 0x03
    159e:	fc 81       	ldd	r31, Y+4	; 0x04
    15a0:	e2 30       	cpi	r30, 0x02	; 2
    15a2:	f1 05       	cpc	r31, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <PWM_timers_init+0x3a>
    15a6:	0f c1       	rjmp	.+542    	; 0x17c6 <PWM_timers_init+0x258>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	21 15       	cp	r18, r1
    15ae:	31 05       	cpc	r19, r1
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <PWM_timers_init+0x46>
    15b2:	46 c1       	rjmp	.+652    	; 0x1840 <PWM_timers_init+0x2d2>
	{

	case TIMER_0:
		clear_timer(TIMER_0); /* Set Timer Initial Value to 0*/
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <clear_timer>
		OCR0_REG  = timer_config->set_duty_cycle ; /* Set Compare Value*/
    15ba:	ac e5       	ldi	r26, 0x5C	; 92
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	8c 93       	st	X, r24
		/*Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_B, PIN_3, OUTPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	63 e0       	ldi	r22, 0x03	; 3
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC0_REG,7);
    15d2:	a3 e5       	ldi	r26, 0x53	; 83
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e3 e5       	ldi	r30, 0x53	; 83
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 77       	andi	r24, 0x7F	; 127
    15de:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    15e0:	e9 81       	ldd	r30, Y+1	; 0x01
    15e2:	fa 81       	ldd	r31, Y+2	; 0x02
    15e4:	80 85       	ldd	r24, Z+8	; 0x08
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	29 f4       	brne	.+10     	; 0x15f4 <PWM_timers_init+0x86>
		{
			TCC0_REG = (1<<3) | (1<<5) | (1<<6);
    15ea:	e3 e5       	ldi	r30, 0x53	; 83
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	88 e6       	ldi	r24, 0x68	; 104
    15f0:	80 83       	st	Z, r24
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <PWM_timers_init+0x98>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    15f4:	e9 81       	ldd	r30, Y+1	; 0x01
    15f6:	fa 81       	ldd	r31, Y+2	; 0x02
    15f8:	80 85       	ldd	r24, Z+8	; 0x08
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	21 f4       	brne	.+8      	; 0x1606 <PWM_timers_init+0x98>
		{
			TCC0_REG = (0<<3) | (1<<5) | (1<<6);
    15fe:	e3 e5       	ldi	r30, 0x53	; 83
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 e6       	ldi	r24, 0x60	; 96
    1604:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC0_REG=(TCC0_REG & 0b11111000)|(timer_config->T0_T1_used_freq & 0b00000111 );
    1606:	a3 e5       	ldi	r26, 0x53	; 83
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e3 e5       	ldi	r30, 0x53	; 83
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	98 2f       	mov	r25, r24
    1612:	98 7f       	andi	r25, 0xF8	; 248
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	86 81       	ldd	r24, Z+6	; 0x06
    161a:	87 70       	andi	r24, 0x07	; 7
    161c:	89 2b       	or	r24, r25
    161e:	8c 93       	st	X, r24
    1620:	0f c1       	rjmp	.+542    	; 0x1840 <PWM_timers_init+0x2d2>
		break;
	case TIMER_1:
		clear_timer(TIMER_1); /* Set Timer Initial Value to 0*/
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <clear_timer>
		ICR1_REG   = timer_config->timer1_TOP_value; /* Set TOP Value*/
    1628:	a6 e4       	ldi	r26, 0x46	; 70
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e9 81       	ldd	r30, Y+1	; 0x01
    162e:	fa 81       	ldd	r31, Y+2	; 0x02
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	11 96       	adiw	r26, 0x01	; 1
    1636:	9c 93       	st	X, r25
    1638:	8e 93       	st	-X, r24
		OCR1A_REG  = timer_config->set_duty_cycle; /* Set Compare Value*/
    163a:	aa e4       	ldi	r26, 0x4A	; 74
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e9 81       	ldd	r30, Y+1	; 0x01
    1640:	fa 81       	ldd	r31, Y+2	; 0x02
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	11 96       	adiw	r26, 0x01	; 1
    1648:	9c 93       	st	X, r25
    164a:	8e 93       	st	-X, r24
		/*Configure PD5/OC1A and PD4/OC1B as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_5, OUTPUT);/*OC1A->output*/
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	65 e0       	ldi	r22, 0x05	; 5
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode mode 14
		 * 3. Clear OC1A when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 */

		CLR_BIT(TCC1A_REG,3);
    1656:	af e4       	ldi	r26, 0x4F	; 79
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ef e4       	ldi	r30, 0x4F	; 79
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	87 7f       	andi	r24, 0xF7	; 247
    1662:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	80 85       	ldd	r24, Z+8	; 0x08
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	09 f0       	breq	.+2      	; 0x1670 <PWM_timers_init+0x102>
    166e:	5b c0       	rjmp	.+182    	; 0x1726 <PWM_timers_init+0x1b8>
		{

			SET_BIT(TCC1B_REG,4);SET_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1670:	ae e4       	ldi	r26, 0x4E	; 78
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e4       	ldi	r30, 0x4E	; 78
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	80 61       	ori	r24, 0x10	; 16
    167c:	8c 93       	st	X, r24
    167e:	ae e4       	ldi	r26, 0x4E	; 78
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ee e4       	ldi	r30, 0x4E	; 78
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	88 60       	ori	r24, 0x08	; 8
    168a:	8c 93       	st	X, r24
    168c:	af e4       	ldi	r26, 0x4F	; 79
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	ef e4       	ldi	r30, 0x4F	; 79
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	8c 93       	st	X, r24
    169a:	af e4       	ldi	r26, 0x4F	; 79
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	ef e4       	ldi	r30, 0x4F	; 79
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8e 7f       	andi	r24, 0xFE	; 254
    16a6:	8c 93       	st	X, r24
			SET_BIT(TCC1A_REG,7);SET_BIT(TCC1A_REG,5);CLR_BIT(TCC1A_REG,6);CLR_BIT(TCC1A_REG,4);
    16a8:	af e4       	ldi	r26, 0x4F	; 79
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	ef e4       	ldi	r30, 0x4F	; 79
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	8c 93       	st	X, r24
    16b6:	af e4       	ldi	r26, 0x4F	; 79
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ef e4       	ldi	r30, 0x4F	; 79
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	80 62       	ori	r24, 0x20	; 32
    16c2:	8c 93       	st	X, r24
    16c4:	af e4       	ldi	r26, 0x4F	; 79
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ef e4       	ldi	r30, 0x4F	; 79
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 7b       	andi	r24, 0xBF	; 191
    16d0:	8c 93       	st	X, r24
    16d2:	af e4       	ldi	r26, 0x4F	; 79
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e4       	ldi	r30, 0x4F	; 79
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7e       	andi	r24, 0xEF	; 239
    16de:	8c 93       	st	X, r24
			if(timer_config->channels_number==BOTH_CHANNELS)
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	83 85       	ldd	r24, Z+11	; 0x0b
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	09 f0       	breq	.+2      	; 0x16ec <PWM_timers_init+0x17e>
    16ea:	5f c0       	rjmp	.+190    	; 0x17aa <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8b 7f       	andi	r24, 0xFB	; 251
    16f8:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	64 e0       	ldi	r22, 0x04	; 4
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    1704:	af e4       	ldi	r26, 0x4F	; 79
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ef e4       	ldi	r30, 0x4F	; 79
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 62       	ori	r24, 0x20	; 32
    1710:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    1712:	a8 e4       	ldi	r26, 0x48	; 72
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	84 81       	ldd	r24, Z+4	; 0x04
    171c:	95 81       	ldd	r25, Z+5	; 0x05
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	9c 93       	st	X, r25
    1722:	8e 93       	st	-X, r24
    1724:	42 c0       	rjmp	.+132    	; 0x17aa <PWM_timers_init+0x23c>
			}
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    1726:	e9 81       	ldd	r30, Y+1	; 0x01
    1728:	fa 81       	ldd	r31, Y+2	; 0x02
    172a:	80 85       	ldd	r24, Z+8	; 0x08
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	e9 f5       	brne	.+122    	; 0x17aa <PWM_timers_init+0x23c>
		{

			SET_BIT(TCC1B_REG,4);CLR_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1730:	ae e4       	ldi	r26, 0x4E	; 78
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e4       	ldi	r30, 0x4E	; 78
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 61       	ori	r24, 0x10	; 16
    173c:	8c 93       	st	X, r24
    173e:	ae e4       	ldi	r26, 0x4E	; 78
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ee e4       	ldi	r30, 0x4E	; 78
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	87 7f       	andi	r24, 0xF7	; 247
    174a:	8c 93       	st	X, r24
    174c:	af e4       	ldi	r26, 0x4F	; 79
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ef e4       	ldi	r30, 0x4F	; 79
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	82 60       	ori	r24, 0x02	; 2
    1758:	8c 93       	st	X, r24
    175a:	af e4       	ldi	r26, 0x4F	; 79
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ef e4       	ldi	r30, 0x4F	; 79
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8e 7f       	andi	r24, 0xFE	; 254
    1766:	8c 93       	st	X, r24

			if(timer_config->channels_number==BOTH_CHANNELS)
    1768:	e9 81       	ldd	r30, Y+1	; 0x01
    176a:	fa 81       	ldd	r31, Y+2	; 0x02
    176c:	83 85       	ldd	r24, Z+11	; 0x0b
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	e1 f4       	brne	.+56     	; 0x17aa <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    1772:	af e4       	ldi	r26, 0x4F	; 79
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ef e4       	ldi	r30, 0x4F	; 79
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	8b 7f       	andi	r24, 0xFB	; 251
    177e:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	64 e0       	ldi	r22, 0x04	; 4
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    178a:	af e4       	ldi	r26, 0x4F	; 79
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ef e4       	ldi	r30, 0x4F	; 79
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 62       	ori	r24, 0x20	; 32
    1796:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    1798:	a8 e4       	ldi	r26, 0x48	; 72
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	84 81       	ldd	r24, Z+4	; 0x04
    17a2:	95 81       	ldd	r25, Z+5	; 0x05
    17a4:	11 96       	adiw	r26, 0x01	; 1
    17a6:	9c 93       	st	X, r25
    17a8:	8e 93       	st	-X, r24
			}
		}
			/*select the clk (prescaler)to start counting */
			TCC1B_REG=(TCC1B_REG & 0b11111000)|(timer_config->T0_T1_used_freq&0b00000111 );
    17aa:	ae e4       	ldi	r26, 0x4E	; 78
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ee e4       	ldi	r30, 0x4E	; 78
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	98 2f       	mov	r25, r24
    17b6:	98 7f       	andi	r25, 0xF8	; 248
    17b8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ba:	fa 81       	ldd	r31, Y+2	; 0x02
    17bc:	86 81       	ldd	r24, Z+6	; 0x06
    17be:	87 70       	andi	r24, 0x07	; 7
    17c0:	89 2b       	or	r24, r25
    17c2:	8c 93       	st	X, r24
    17c4:	3d c0       	rjmp	.+122    	; 0x1840 <PWM_timers_init+0x2d2>
			break;
	case TIMER_2:
		clear_timer(TIMER_2); /* Set Timer Initial Value to 0*/
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <clear_timer>
		OCR2_REG  = timer_config->set_duty_cycle/100; /* Set Compare Value*/
    17cc:	03 e4       	ldi	r16, 0x43	; 67
    17ce:	10 e0       	ldi	r17, 0x00	; 0
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	24 e6       	ldi	r18, 0x64	; 100
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	b9 01       	movw	r22, r18
    17de:	0e 94 00 20 	call	0x4000	; 0x4000 <__udivmodhi4>
    17e2:	cb 01       	movw	r24, r22
    17e4:	f8 01       	movw	r30, r16
    17e6:	80 83       	st	Z, r24
		/*Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_7, OUTPUT);
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	67 e0       	ldi	r22, 0x07	; 7
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM21=1 & WGM20=1
		 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC2_REG,7);
    17f2:	a5 e4       	ldi	r26, 0x45	; 69
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e4       	ldi	r30, 0x45	; 69
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	80 85       	ldd	r24, Z+8	; 0x08
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	29 f4       	brne	.+10     	; 0x1814 <PWM_timers_init+0x2a6>
		{
			TCC2_REG = (1<<3) | (1<<5) | (1<<6);
    180a:	e5 e4       	ldi	r30, 0x45	; 69
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	88 e6       	ldi	r24, 0x68	; 104
    1810:	80 83       	st	Z, r24
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <PWM_timers_init+0x2b8>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    1814:	e9 81       	ldd	r30, Y+1	; 0x01
    1816:	fa 81       	ldd	r31, Y+2	; 0x02
    1818:	80 85       	ldd	r24, Z+8	; 0x08
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	21 f4       	brne	.+8      	; 0x1826 <PWM_timers_init+0x2b8>
		{
			TCC2_REG = (0<<3) | (1<<5) | (1<<6);
    181e:	e5 e4       	ldi	r30, 0x45	; 69
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 e6       	ldi	r24, 0x60	; 96
    1824:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC2_REG=(TCC2_REG & 0b11111000)|(timer_config->T2_used_freq&0b00000111 );
    1826:	a5 e4       	ldi	r26, 0x45	; 69
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e5 e4       	ldi	r30, 0x45	; 69
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	98 2f       	mov	r25, r24
    1832:	98 7f       	andi	r25, 0xF8	; 248
    1834:	e9 81       	ldd	r30, Y+1	; 0x01
    1836:	fa 81       	ldd	r31, Y+2	; 0x02
    1838:	87 81       	ldd	r24, Z+7	; 0x07
    183a:	87 70       	andi	r24, 0x07	; 7
    183c:	89 2b       	or	r24, r25
    183e:	8c 93       	st	X, r24
		break;
		}

	}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <Global_VidINTEnable>:

    void Global_VidINTEnable(void)
	{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(S_REG,7);
    185a:	af e5       	ldi	r26, 0x5F	; 95
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e5       	ldi	r30, 0x5F	; 95
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 68       	ori	r24, 0x80	; 128
    1866:	8c 93       	st	X, r24
	}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <Global_VidINTDisable>:

	void Global_VidINTDisable(void)
	{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(S_REG,7);
    1876:	af e5       	ldi	r26, 0x5F	; 95
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ef e5       	ldi	r30, 0x5F	; 95
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 77       	andi	r24, 0x7F	; 127
    1882:	8c 93       	st	X, r24
	}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <Set_CallBack_EXTINT_0>:

EXTINT_N_PTR  EXTINT_ISR;


void Set_CallBack_EXTINT_0(void (*ptr)(void))
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <Set_CallBack_EXTINT_0+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <Set_CallBack_EXTINT_0+0x22>
	{
		EXTINT_ISR.EXTINT_0 = ptr;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	90 93 bf 00 	sts	0x00BF, r25
    18a8:	80 93 be 00 	sts	0x00BE, r24
	}
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <__vector_1>:
void __vector_1 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_1 (void)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR.EXTINT_0 != NULL)
    18e0:	80 91 be 00 	lds	r24, 0x00BE
    18e4:	90 91 bf 00 	lds	r25, 0x00BF
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	29 f0       	breq	.+10     	; 0x18f6 <__vector_1+0x40>
	{
		EXTINT_ISR.EXTINT_0();
    18ec:	e0 91 be 00 	lds	r30, 0x00BE
    18f0:	f0 91 bf 00 	lds	r31, 0x00BF
    18f4:	09 95       	icall
	}
}
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	0f 90       	pop	r0
    1918:	1f 90       	pop	r1
    191a:	18 95       	reti

0000191c <Set_CallBack_EXTINT_1>:

void Set_CallBack_EXTINT_1(void (*ptr)(void))
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <Set_CallBack_EXTINT_1+0x6>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	31 f0       	breq	.+12     	; 0x193e <Set_CallBack_EXTINT_1+0x22>
	{
		EXTINT_ISR.EXTINT_1 = ptr;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	90 93 c1 00 	sts	0x00C1, r25
    193a:	80 93 c0 00 	sts	0x00C0, r24
	}
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <__vector_2>:
void __vector_2 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_2 (void)
{
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	2f 93       	push	r18
    1954:	3f 93       	push	r19
    1956:	4f 93       	push	r20
    1958:	5f 93       	push	r21
    195a:	6f 93       	push	r22
    195c:	7f 93       	push	r23
    195e:	8f 93       	push	r24
    1960:	9f 93       	push	r25
    1962:	af 93       	push	r26
    1964:	bf 93       	push	r27
    1966:	ef 93       	push	r30
    1968:	ff 93       	push	r31
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR.EXTINT_1 != NULL)
    1972:	80 91 c0 00 	lds	r24, 0x00C0
    1976:	90 91 c1 00 	lds	r25, 0x00C1
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	29 f0       	breq	.+10     	; 0x1988 <__vector_2+0x40>
	{
		EXTINT_ISR.EXTINT_1();
    197e:	e0 91 c0 00 	lds	r30, 0x00C0
    1982:	f0 91 c1 00 	lds	r31, 0x00C1
    1986:	09 95       	icall
	}
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <Set_CallBack_EXTINT_2>:

void Set_CallBack_EXTINT_2(void (*ptr)(void))
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <Set_CallBack_EXTINT_2+0x6>
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <Set_CallBack_EXTINT_2+0x22>
	{
		EXTINT_ISR.EXTINT_2 = ptr;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	90 93 c3 00 	sts	0x00C3, r25
    19cc:	80 93 c2 00 	sts	0x00C2, r24
	}
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <__vector_3>:
void __vector_3 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_3 (void)
{
    19da:	1f 92       	push	r1
    19dc:	0f 92       	push	r0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	0f 92       	push	r0
    19e2:	11 24       	eor	r1, r1
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR.EXTINT_2 != NULL)
    1a04:	80 91 c2 00 	lds	r24, 0x00C2
    1a08:	90 91 c3 00 	lds	r25, 0x00C3
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <__vector_3+0x40>
	{
		EXTINT_ISR.EXTINT_2();
    1a10:	e0 91 c2 00 	lds	r30, 0x00C2
    1a14:	f0 91 c3 00 	lds	r31, 0x00C3
    1a18:	09 95       	icall
	}
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <EXTINT_u8Enable>:

u8 EXTINT_u8Enable(u8 Copy_u8ExtInt)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <EXTINT_u8Enable+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <EXTINT_u8Enable+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
	S_REG |= GLOBAL_INTERRUPT_ENABLE;
    1a50:	af e5       	ldi	r26, 0x5F	; 95
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	ef e5       	ldi	r30, 0x5F	; 95
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	80 68       	ori	r24, 0x80	; 128
    1a5c:	8c 93       	st	X, r24
	switch(Copy_u8ExtInt)
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3c 83       	std	Y+4, r19	; 0x04
    1a66:	2b 83       	std	Y+3, r18	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	91 05       	cpc	r25, r1
    1a70:	89 f0       	breq	.+34     	; 0x1a94 <EXTINT_u8Enable+0x54>
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	a1 f0       	breq	.+40     	; 0x1aa4 <EXTINT_u8Enable+0x64>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	c1 f4       	brne	.+48     	; 0x1ab4 <EXTINT_u8Enable+0x74>
	{
	case INT_0 : GIC_REG |= INT0_EN ; break;
    1a84:	ab e5       	ldi	r26, 0x5B	; 91
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	eb e5       	ldi	r30, 0x5B	; 91
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 64       	ori	r24, 0x40	; 64
    1a90:	8c 93       	st	X, r24
    1a92:	12 c0       	rjmp	.+36     	; 0x1ab8 <EXTINT_u8Enable+0x78>
	case INT_1 : GIC_REG |= INT1_EN ; break;
    1a94:	ab e5       	ldi	r26, 0x5B	; 91
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	eb e5       	ldi	r30, 0x5B	; 91
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	80 68       	ori	r24, 0x80	; 128
    1aa0:	8c 93       	st	X, r24
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <EXTINT_u8Enable+0x78>
	case INT_2 : GIC_REG |= INT2_EN ; break;
    1aa4:	ab e5       	ldi	r26, 0x5B	; 91
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	eb e5       	ldi	r30, 0x5B	; 91
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 62       	ori	r24, 0x20	; 32
    1ab0:	8c 93       	st	X, r24
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <EXTINT_u8Enable+0x78>
	default : Local_u8errStatus = RT_NOK ;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <EXTINT_u8Disable>:

u8 EXTINT_u8Disable(u8 Copy_u8ExtInt)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <EXTINT_u8Disable+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <EXTINT_u8Disable+0x8>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
    1ad6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtInt)
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3c 83       	std	Y+4, r19	; 0x04
    1ae0:	2b 83       	std	Y+3, r18	; 0x03
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	e9 f0       	breq	.+58     	; 0x1b26 <EXTINT_u8Disable+0x5e>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <EXTINT_u8Disable+0x38>
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <EXTINT_u8Disable+0x4e>
    1afe:	2b c0       	rjmp	.+86     	; 0x1b56 <EXTINT_u8Disable+0x8e>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	b1 f0       	breq	.+44     	; 0x1b36 <EXTINT_u8Disable+0x6e>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	c9 f0       	breq	.+50     	; 0x1b46 <EXTINT_u8Disable+0x7e>
    1b14:	20 c0       	rjmp	.+64     	; 0x1b56 <EXTINT_u8Disable+0x8e>
	{
	case INT_0 : CLR_BIT(GIC_REG,6) ; break;
    1b16:	ab e5       	ldi	r26, 0x5B	; 91
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	eb e5       	ldi	r30, 0x5B	; 91
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 7b       	andi	r24, 0xBF	; 191
    1b22:	8c 93       	st	X, r24
    1b24:	1a c0       	rjmp	.+52     	; 0x1b5a <EXTINT_u8Disable+0x92>
	case INT_1 : CLR_BIT(GIC_REG,7) ; break;
    1b26:	ab e5       	ldi	r26, 0x5B	; 91
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	eb e5       	ldi	r30, 0x5B	; 91
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8f 77       	andi	r24, 0x7F	; 127
    1b32:	8c 93       	st	X, r24
    1b34:	12 c0       	rjmp	.+36     	; 0x1b5a <EXTINT_u8Disable+0x92>
	case INT_2 : CLR_BIT(GIC_REG,5) ; break;
    1b36:	ab e5       	ldi	r26, 0x5B	; 91
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	eb e5       	ldi	r30, 0x5B	; 91
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 7d       	andi	r24, 0xDF	; 223
    1b42:	8c 93       	st	X, r24
    1b44:	0a c0       	rjmp	.+20     	; 0x1b5a <EXTINT_u8Disable+0x92>
	case G_DIS : CLR_BIT(S_REG,7) ; break;
    1b46:	af e5       	ldi	r26, 0x5F	; 95
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ef e5       	ldi	r30, 0x5F	; 95
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8f 77       	andi	r24, 0x7F	; 127
    1b52:	8c 93       	st	X, r24
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <EXTINT_u8Disable+0x92>
	default : Local_u8errStatus = RT_NOK;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <EXTINT_u8SenseCtrl>:

u8 EXTINT_u8SenseCtrl(u8 Copy_u8ExtInt,u8 Copy_u8ISCStatus)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <EXTINT_u8SenseCtrl+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <EXTINT_u8SenseCtrl+0x8>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1b7c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8ExtInt)
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	3d 83       	std	Y+5, r19	; 0x05
    1b86:	2c 83       	std	Y+4, r18	; 0x04
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	01 f1       	breq	.+64     	; 0x1bd2 <EXTINT_u8SenseCtrl+0x68>
    1b92:	2c 81       	ldd	r18, Y+4	; 0x04
    1b94:	3d 81       	ldd	r19, Y+5	; 0x05
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	89 f1       	breq	.+98     	; 0x1bfe <EXTINT_u8SenseCtrl+0x94>
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <EXTINT_u8SenseCtrl+0x3c>
    1ba4:	42 c0       	rjmp	.+132    	; 0x1c2a <EXTINT_u8SenseCtrl+0xc0>
	{
	case INT_0 :
		Temp_Reg = MCUC_REG;
    1ba6:	e5 e5       	ldi	r30, 0x55	; 85
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 93 bd 00 	sts	0x00BD, r24
		Temp_Reg &= INT0_SC_CLR_MASK;
    1bb0:	80 91 bd 00 	lds	r24, 0x00BD
    1bb4:	8c 7f       	andi	r24, 0xFC	; 252
    1bb6:	80 93 bd 00 	sts	0x00BD, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1bba:	90 91 bd 00 	lds	r25, 0x00BD
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	89 2b       	or	r24, r25
    1bc2:	80 93 bd 00 	sts	0x00BD, r24
		MCUC_REG = Temp_Reg;
    1bc6:	e5 e5       	ldi	r30, 0x55	; 85
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 91 bd 00 	lds	r24, 0x00BD
    1bce:	80 83       	st	Z, r24
    1bd0:	2e c0       	rjmp	.+92     	; 0x1c2e <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_1 :
		Temp_Reg = MCUC_REG;
    1bd2:	e5 e5       	ldi	r30, 0x55	; 85
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	80 93 bd 00 	sts	0x00BD, r24
		Temp_Reg &= INT1_SC_CLR_MASK;
    1bdc:	80 91 bd 00 	lds	r24, 0x00BD
    1be0:	83 7f       	andi	r24, 0xF3	; 243
    1be2:	80 93 bd 00 	sts	0x00BD, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1be6:	90 91 bd 00 	lds	r25, 0x00BD
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	89 2b       	or	r24, r25
    1bee:	80 93 bd 00 	sts	0x00BD, r24
		MCUC_REG = Temp_Reg;
    1bf2:	e5 e5       	ldi	r30, 0x55	; 85
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 91 bd 00 	lds	r24, 0x00BD
    1bfa:	80 83       	st	Z, r24
    1bfc:	18 c0       	rjmp	.+48     	; 0x1c2e <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_2 :
		Temp_Reg = MCUCS_REG;
    1bfe:	e4 e5       	ldi	r30, 0x54	; 84
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 93 bd 00 	sts	0x00BD, r24
		Temp_Reg &= INT2_SC_CLR_MASK;
    1c08:	80 91 bd 00 	lds	r24, 0x00BD
    1c0c:	8f 7b       	andi	r24, 0xBF	; 191
    1c0e:	80 93 bd 00 	sts	0x00BD, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1c12:	90 91 bd 00 	lds	r25, 0x00BD
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	89 2b       	or	r24, r25
    1c1a:	80 93 bd 00 	sts	0x00BD, r24
		MCUCS_REG = Temp_Reg;
    1c1e:	e4 e5       	ldi	r30, 0x54	; 84
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 91 bd 00 	lds	r24, 0x00BD
    1c26:	80 83       	st	Z, r24
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <EXTINT_u8SenseCtrl+0xc4>
		break;
	default : Local_u8errStatus = RT_NOK;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <DIO_u8setPortDirection>:
#define RT_NOK   (u8)   1
#define NULL     (void *)0


u8 DIO_u8setPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{   u8 Local_u8errStatus = RT_OK;
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <DIO_u8setPortDirection+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <DIO_u8setPortDirection+0x8>
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	6b 83       	std	Y+3, r22	; 0x03
    1c52:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	3d 83       	std	Y+5, r19	; 0x05
    1c5c:	2c 83       	std	Y+4, r18	; 0x04
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	9d 81       	ldd	r25, Y+5	; 0x05
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	91 05       	cpc	r25, r1
    1c66:	d1 f0       	breq	.+52     	; 0x1c9c <DIO_u8setPortDirection+0x5c>
    1c68:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <DIO_u8setPortDirection+0x3c>
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	61 f0       	breq	.+24     	; 0x1c92 <DIO_u8setPortDirection+0x52>
    1c7a:	1f c0       	rjmp	.+62     	; 0x1cba <DIO_u8setPortDirection+0x7a>
    1c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	81 f0       	breq	.+32     	; 0x1ca6 <DIO_u8setPortDirection+0x66>
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	81 f0       	breq	.+32     	; 0x1cb0 <DIO_u8setPortDirection+0x70>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <DIO_u8setPortDirection+0x7a>
{
case PORT_A :DIOA->DDR = Copy_u8direction ;break ;
    1c92:	e9 e3       	ldi	r30, 0x39	; 57
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	81 83       	std	Z+1, r24	; 0x01
    1c9a:	11 c0       	rjmp	.+34     	; 0x1cbe <DIO_u8setPortDirection+0x7e>
case PORT_B :DIOB->DDR = Copy_u8direction ;break ;
    1c9c:	e6 e3       	ldi	r30, 0x36	; 54
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	81 83       	std	Z+1, r24	; 0x01
    1ca4:	0c c0       	rjmp	.+24     	; 0x1cbe <DIO_u8setPortDirection+0x7e>
case PORT_C :DIOC->DDR = Copy_u8direction ;break ;
    1ca6:	e3 e3       	ldi	r30, 0x33	; 51
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	81 83       	std	Z+1, r24	; 0x01
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <DIO_u8setPortDirection+0x7e>
case PORT_D :DIOD->DDR = Copy_u8direction ;break ;
    1cb0:	e0 e3       	ldi	r30, 0x30	; 48
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	81 83       	std	Z+1, r24	; 0x01
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <DIO_u8setPortDirection+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <DIO_u8setPortValue>:
u8 DIO_u8setPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{ u8 Local_u8errStatus = RT_OK;
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <DIO_u8setPortValue+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <DIO_u8setPortValue+0x8>
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	6b 83       	std	Y+3, r22	; 0x03
    1ce2:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3d 83       	std	Y+5, r19	; 0x05
    1cec:	2c 83       	std	Y+4, r18	; 0x04
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	d1 f0       	breq	.+52     	; 0x1d2c <DIO_u8setPortValue+0x5c>
    1cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <DIO_u8setPortValue+0x3c>
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <DIO_u8setPortValue+0x52>
    1d0a:	1f c0       	rjmp	.+62     	; 0x1d4a <DIO_u8setPortValue+0x7a>
    1d0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	81 f0       	breq	.+32     	; 0x1d36 <DIO_u8setPortValue+0x66>
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	81 f0       	breq	.+32     	; 0x1d40 <DIO_u8setPortValue+0x70>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <DIO_u8setPortValue+0x7a>
{
case PORT_A :DIOA->PORT = Copy_u8Value ;break ;
    1d22:	e9 e3       	ldi	r30, 0x39	; 57
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	82 83       	std	Z+2, r24	; 0x02
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <DIO_u8setPortValue+0x7e>
case PORT_B :DIOB->PORT = Copy_u8Value ;break ;
    1d2c:	e6 e3       	ldi	r30, 0x36	; 54
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	82 83       	std	Z+2, r24	; 0x02
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <DIO_u8setPortValue+0x7e>
case PORT_C :DIOC->PORT = Copy_u8Value ;break ;
    1d36:	e3 e3       	ldi	r30, 0x33	; 51
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	82 83       	std	Z+2, r24	; 0x02
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <DIO_u8setPortValue+0x7e>
case PORT_D :DIOD->PORT = Copy_u8Value ;break ;
    1d40:	e0 e3       	ldi	r30, 0x30	; 48
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	82 83       	std	Z+2, r24	; 0x02
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_u8setPortValue+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <DIO_u8getPortValue>:

u8 DIO_u8getPortValue(u8 Copy_u8port, u8 * Copy_u8pValue)
{u8 Local_u8errStatus = RT_OK;
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <DIO_u8getPortValue+0x6>
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <DIO_u8getPortValue+0x8>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <DIO_u8getPortValue+0xa>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	8a 83       	std	Y+2, r24	; 0x02
    1d70:	7c 83       	std	Y+4, r23	; 0x04
    1d72:	6b 83       	std	Y+3, r22	; 0x03
    1d74:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pValue != NULL)
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <DIO_u8getPortValue+0x20>
    1d7e:	3e c0       	rjmp	.+124    	; 0x1dfc <DIO_u8getPortValue+0x9c>
{
	switch(Copy_u8port)
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	3e 83       	std	Y+6, r19	; 0x06
    1d88:	2d 83       	std	Y+5, r18	; 0x05
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	91 05       	cpc	r25, r1
    1d92:	e1 f0       	breq	.+56     	; 0x1dcc <DIO_u8getPortValue+0x6c>
    1d94:	2d 81       	ldd	r18, Y+5	; 0x05
    1d96:	3e 81       	ldd	r19, Y+6	; 0x06
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <DIO_u8getPortValue+0x48>
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <DIO_u8getPortValue+0x5e>
    1da6:	27 c0       	rjmp	.+78     	; 0x1df6 <DIO_u8getPortValue+0x96>
    1da8:	2d 81       	ldd	r18, Y+5	; 0x05
    1daa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	a1 f0       	breq	.+40     	; 0x1dda <DIO_u8getPortValue+0x7a>
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	b1 f0       	breq	.+44     	; 0x1de8 <DIO_u8getPortValue+0x88>
    1dbc:	1c c0       	rjmp	.+56     	; 0x1df6 <DIO_u8getPortValue+0x96>
	{
	case PORT_A : *Copy_u8pValue = DIOA->PIN ;break ;
    1dbe:	e9 e3       	ldi	r30, 0x39	; 57
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc8:	80 83       	st	Z, r24
    1dca:	1a c0       	rjmp	.+52     	; 0x1e00 <DIO_u8getPortValue+0xa0>
	case PORT_B : *Copy_u8pValue = DIOB->PIN ;break ;
    1dcc:	e6 e3       	ldi	r30, 0x36	; 54
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd6:	80 83       	st	Z, r24
    1dd8:	13 c0       	rjmp	.+38     	; 0x1e00 <DIO_u8getPortValue+0xa0>
	case PORT_C : *Copy_u8pValue = DIOC->PIN ;break ;
    1dda:	e3 e3       	ldi	r30, 0x33	; 51
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	eb 81       	ldd	r30, Y+3	; 0x03
    1de2:	fc 81       	ldd	r31, Y+4	; 0x04
    1de4:	80 83       	st	Z, r24
    1de6:	0c c0       	rjmp	.+24     	; 0x1e00 <DIO_u8getPortValue+0xa0>
	case PORT_D : *Copy_u8pValue = DIOD->PIN ;break ;
    1de8:	e0 e3       	ldi	r30, 0x30	; 48
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	eb 81       	ldd	r30, Y+3	; 0x03
    1df0:	fc 81       	ldd	r31, Y+4	; 0x04
    1df2:	80 83       	st	Z, r24
    1df4:	05 c0       	rjmp	.+10     	; 0x1e00 <DIO_u8getPortValue+0xa0>
	default : Local_u8errStatus = RT_NOK ;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <DIO_u8getPortValue+0xa0>
	}
}
else
{
	Local_u8errStatus = RT_NOK;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e02:	26 96       	adiw	r28, 0x06	; 6
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <DIO_u8setPinDirection>:

u8 DIO_u8setPinDirection(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8direction)
{u8 Local_u8errStatus = RT_OK;
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	6b 83       	std	Y+3, r22	; 0x03
    1e2c:	4c 83       	std	Y+4, r20	; 0x04
    1e2e:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pin <=PIN_7)
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <DIO_u8setPinDirection+0x24>
    1e36:	0d c1       	rjmp	.+538    	; 0x2052 <DIO_u8setPinDirection+0x23e>
{
	switch(Copy_u8direction)
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3a 87       	std	Y+10, r19	; 0x0a
    1e40:	29 87       	std	Y+9, r18	; 0x09
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	39 f0       	breq	.+14     	; 0x1e58 <DIO_u8setPinDirection+0x44>
    1e4a:	29 85       	ldd	r18, Y+9	; 0x09
    1e4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e4e:	21 30       	cpi	r18, 0x01	; 1
    1e50:	31 05       	cpc	r19, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <DIO_u8setPinDirection+0x42>
    1e54:	80 c0       	rjmp	.+256    	; 0x1f56 <DIO_u8setPinDirection+0x142>
    1e56:	fa c0       	rjmp	.+500    	; 0x204c <DIO_u8setPinDirection+0x238>
	{
	case INPUT :
		switch(Copy_u8port)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	38 87       	std	Y+8, r19	; 0x08
    1e60:	2f 83       	std	Y+7, r18	; 0x07
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	98 85       	ldd	r25, Y+8	; 0x08
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	69 f1       	breq	.+90     	; 0x1ec6 <DIO_u8setPinDirection+0xb2>
    1e6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1e6e:	38 85       	ldd	r19, Y+8	; 0x08
    1e70:	22 30       	cpi	r18, 0x02	; 2
    1e72:	31 05       	cpc	r19, r1
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <DIO_u8setPinDirection+0x6c>
    1e76:	8f 81       	ldd	r24, Y+7	; 0x07
    1e78:	98 85       	ldd	r25, Y+8	; 0x08
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f0       	breq	.+26     	; 0x1e98 <DIO_u8setPinDirection+0x84>
    1e7e:	68 c0       	rjmp	.+208    	; 0x1f50 <DIO_u8setPinDirection+0x13c>
    1e80:	2f 81       	ldd	r18, Y+7	; 0x07
    1e82:	38 85       	ldd	r19, Y+8	; 0x08
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	a9 f1       	breq	.+106    	; 0x1ef4 <DIO_u8setPinDirection+0xe0>
    1e8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8c:	98 85       	ldd	r25, Y+8	; 0x08
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	91 05       	cpc	r25, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <DIO_u8setPinDirection+0x82>
    1e94:	46 c0       	rjmp	.+140    	; 0x1f22 <DIO_u8setPinDirection+0x10e>
    1e96:	5c c0       	rjmp	.+184    	; 0x1f50 <DIO_u8setPinDirection+0x13c>
		{
		case PORT_A : CLR_BIT(DIOA->DDR,Copy_u8pin);break;
    1e98:	a9 e3       	ldi	r26, 0x39	; 57
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e9 e3       	ldi	r30, 0x39	; 57
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	81 81       	ldd	r24, Z+1	; 0x01
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_u8setPinDirection+0xa2>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_u8setPinDirection+0x9e>
    1eba:	80 95       	com	r24
    1ebc:	84 23       	and	r24, r20
    1ebe:	11 96       	adiw	r26, 0x01	; 1
    1ec0:	8c 93       	st	X, r24
    1ec2:	11 97       	sbiw	r26, 0x01	; 1
    1ec4:	c8 c0       	rjmp	.+400    	; 0x2056 <DIO_u8setPinDirection+0x242>
		case PORT_B : CLR_BIT(DIOB->DDR,Copy_u8pin);break;
    1ec6:	a6 e3       	ldi	r26, 0x36	; 54
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e6 e3       	ldi	r30, 0x36	; 54
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	81 81       	ldd	r24, Z+1	; 0x01
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <DIO_u8setPinDirection+0xd0>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <DIO_u8setPinDirection+0xcc>
    1ee8:	80 95       	com	r24
    1eea:	84 23       	and	r24, r20
    1eec:	11 96       	adiw	r26, 0x01	; 1
    1eee:	8c 93       	st	X, r24
    1ef0:	11 97       	sbiw	r26, 0x01	; 1
    1ef2:	b1 c0       	rjmp	.+354    	; 0x2056 <DIO_u8setPinDirection+0x242>
		case PORT_C : CLR_BIT(DIOC->DDR,Copy_u8pin);break;
    1ef4:	a3 e3       	ldi	r26, 0x33	; 51
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e3 e3       	ldi	r30, 0x33	; 51
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	81 81       	ldd	r24, Z+1	; 0x01
    1efe:	48 2f       	mov	r20, r24
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_u8setPinDirection+0xfe>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <DIO_u8setPinDirection+0xfa>
    1f16:	80 95       	com	r24
    1f18:	84 23       	and	r24, r20
    1f1a:	11 96       	adiw	r26, 0x01	; 1
    1f1c:	8c 93       	st	X, r24
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	9a c0       	rjmp	.+308    	; 0x2056 <DIO_u8setPinDirection+0x242>
		case PORT_D : CLR_BIT(DIOD->DDR,Copy_u8pin);break;
    1f22:	a0 e3       	ldi	r26, 0x30	; 48
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e0 e3       	ldi	r30, 0x30	; 48
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	81 81       	ldd	r24, Z+1	; 0x01
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 2e       	mov	r0, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <DIO_u8setPinDirection+0x12c>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <DIO_u8setPinDirection+0x128>
    1f44:	80 95       	com	r24
    1f46:	84 23       	and	r24, r20
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	8c 93       	st	X, r24
    1f4c:	11 97       	sbiw	r26, 0x01	; 1
    1f4e:	83 c0       	rjmp	.+262    	; 0x2056 <DIO_u8setPinDirection+0x242>
		default : Local_u8errStatus = RT_NOK;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	80 c0       	rjmp	.+256    	; 0x2056 <DIO_u8setPinDirection+0x242>
		}
		break;
		case OUTPUT :
			switch(Copy_u8port)
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	3e 83       	std	Y+6, r19	; 0x06
    1f5e:	2d 83       	std	Y+5, r18	; 0x05
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	91 05       	cpc	r25, r1
    1f68:	61 f1       	breq	.+88     	; 0x1fc2 <DIO_u8setPinDirection+0x1ae>
    1f6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <DIO_u8setPinDirection+0x16a>
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	69 f0       	breq	.+26     	; 0x1f96 <DIO_u8setPinDirection+0x182>
    1f7c:	64 c0       	rjmp	.+200    	; 0x2046 <DIO_u8setPinDirection+0x232>
    1f7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f80:	3e 81       	ldd	r19, Y+6	; 0x06
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	99 f1       	breq	.+102    	; 0x1fee <DIO_u8setPinDirection+0x1da>
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	91 05       	cpc	r25, r1
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <DIO_u8setPinDirection+0x180>
    1f92:	43 c0       	rjmp	.+134    	; 0x201a <DIO_u8setPinDirection+0x206>
    1f94:	58 c0       	rjmp	.+176    	; 0x2046 <DIO_u8setPinDirection+0x232>
			{
			case PORT_A : SET_BIT(DIOA->DDR,Copy_u8pin);break;
    1f96:	a9 e3       	ldi	r26, 0x39	; 57
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e9 e3       	ldi	r30, 0x39	; 57
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	81 81       	ldd	r24, Z+1	; 0x01
    1fa0:	48 2f       	mov	r20, r24
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 2e       	mov	r0, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <DIO_u8setPinDirection+0x1a0>
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <DIO_u8setPinDirection+0x19c>
    1fb8:	84 2b       	or	r24, r20
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	8c 93       	st	X, r24
    1fbe:	11 97       	sbiw	r26, 0x01	; 1
    1fc0:	4a c0       	rjmp	.+148    	; 0x2056 <DIO_u8setPinDirection+0x242>
			case PORT_B : SET_BIT(DIOB->DDR,Copy_u8pin);break;
    1fc2:	a6 e3       	ldi	r26, 0x36	; 54
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e6 e3       	ldi	r30, 0x36	; 54
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	81 81       	ldd	r24, Z+1	; 0x01
    1fcc:	48 2f       	mov	r20, r24
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 2e       	mov	r0, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <DIO_u8setPinDirection+0x1cc>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <DIO_u8setPinDirection+0x1c8>
    1fe4:	84 2b       	or	r24, r20
    1fe6:	11 96       	adiw	r26, 0x01	; 1
    1fe8:	8c 93       	st	X, r24
    1fea:	11 97       	sbiw	r26, 0x01	; 1
    1fec:	34 c0       	rjmp	.+104    	; 0x2056 <DIO_u8setPinDirection+0x242>
			case PORT_C : SET_BIT(DIOC->DDR,Copy_u8pin);break;
    1fee:	a3 e3       	ldi	r26, 0x33	; 51
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e3 e3       	ldi	r30, 0x33	; 51
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	81 81       	ldd	r24, Z+1	; 0x01
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <DIO_u8setPinDirection+0x1f8>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <DIO_u8setPinDirection+0x1f4>
    2010:	84 2b       	or	r24, r20
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	8c 93       	st	X, r24
    2016:	11 97       	sbiw	r26, 0x01	; 1
    2018:	1e c0       	rjmp	.+60     	; 0x2056 <DIO_u8setPinDirection+0x242>
			case PORT_D : SET_BIT(DIOD->DDR,Copy_u8pin);break;
    201a:	a0 e3       	ldi	r26, 0x30	; 48
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e0 e3       	ldi	r30, 0x30	; 48
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	81 81       	ldd	r24, Z+1	; 0x01
    2024:	48 2f       	mov	r20, r24
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <DIO_u8setPinDirection+0x224>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <DIO_u8setPinDirection+0x220>
    203c:	84 2b       	or	r24, r20
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	8c 93       	st	X, r24
    2042:	11 97       	sbiw	r26, 0x01	; 1
    2044:	08 c0       	rjmp	.+16     	; 0x2056 <DIO_u8setPinDirection+0x242>
			default : Local_u8errStatus = RT_NOK;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <DIO_u8setPinDirection+0x242>
			}
			break;
			default : Local_u8errStatus = RT_NOK;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <DIO_u8setPinDirection+0x242>

	}
}
else
{
	Local_u8errStatus = RT_NOK;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
}
    2058:	2a 96       	adiw	r28, 0x0a	; 10
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <DIO_u8setPinValue>:

u8 DIO_u8setPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8value)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	2a 97       	sbiw	r28, 0x0a	; 10
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	6b 83       	std	Y+3, r22	; 0x03
    2082:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    2084:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	88 30       	cpi	r24, 0x08	; 8
    208a:	08 f0       	brcs	.+2      	; 0x208e <DIO_u8setPinValue+0x24>
    208c:	0d c1       	rjmp	.+538    	; 0x22a8 <DIO_u8setPinValue+0x23e>
	{
		switch(Copy_u8value)
    208e:	8c 81       	ldd	r24, Y+4	; 0x04
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	3a 87       	std	Y+10, r19	; 0x0a
    2096:	29 87       	std	Y+9, r18	; 0x09
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	39 f0       	breq	.+14     	; 0x20ae <DIO_u8setPinValue+0x44>
    20a0:	29 85       	ldd	r18, Y+9	; 0x09
    20a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    20a4:	21 30       	cpi	r18, 0x01	; 1
    20a6:	31 05       	cpc	r19, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <DIO_u8setPinValue+0x42>
    20aa:	80 c0       	rjmp	.+256    	; 0x21ac <DIO_u8setPinValue+0x142>
    20ac:	fa c0       	rjmp	.+500    	; 0x22a2 <DIO_u8setPinValue+0x238>
		{
		case LOW :
			switch(Copy_u8port)
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	38 87       	std	Y+8, r19	; 0x08
    20b6:	2f 83       	std	Y+7, r18	; 0x07
    20b8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ba:	98 85       	ldd	r25, Y+8	; 0x08
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	91 05       	cpc	r25, r1
    20c0:	69 f1       	breq	.+90     	; 0x211c <DIO_u8setPinValue+0xb2>
    20c2:	2f 81       	ldd	r18, Y+7	; 0x07
    20c4:	38 85       	ldd	r19, Y+8	; 0x08
    20c6:	22 30       	cpi	r18, 0x02	; 2
    20c8:	31 05       	cpc	r19, r1
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <DIO_u8setPinValue+0x6c>
    20cc:	8f 81       	ldd	r24, Y+7	; 0x07
    20ce:	98 85       	ldd	r25, Y+8	; 0x08
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	69 f0       	breq	.+26     	; 0x20ee <DIO_u8setPinValue+0x84>
    20d4:	68 c0       	rjmp	.+208    	; 0x21a6 <DIO_u8setPinValue+0x13c>
    20d6:	2f 81       	ldd	r18, Y+7	; 0x07
    20d8:	38 85       	ldd	r19, Y+8	; 0x08
    20da:	22 30       	cpi	r18, 0x02	; 2
    20dc:	31 05       	cpc	r19, r1
    20de:	a9 f1       	breq	.+106    	; 0x214a <DIO_u8setPinValue+0xe0>
    20e0:	8f 81       	ldd	r24, Y+7	; 0x07
    20e2:	98 85       	ldd	r25, Y+8	; 0x08
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	91 05       	cpc	r25, r1
    20e8:	09 f4       	brne	.+2      	; 0x20ec <DIO_u8setPinValue+0x82>
    20ea:	46 c0       	rjmp	.+140    	; 0x2178 <DIO_u8setPinValue+0x10e>
    20ec:	5c c0       	rjmp	.+184    	; 0x21a6 <DIO_u8setPinValue+0x13c>
			{
			case PORT_A : CLR_BIT(DIOA->PORT,Copy_u8pin);break;
    20ee:	a9 e3       	ldi	r26, 0x39	; 57
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 e3       	ldi	r30, 0x39	; 57
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	48 2f       	mov	r20, r24
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	02 2e       	mov	r0, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_u8setPinValue+0xa2>
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	0a 94       	dec	r0
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_u8setPinValue+0x9e>
    2110:	80 95       	com	r24
    2112:	84 23       	and	r24, r20
    2114:	12 96       	adiw	r26, 0x02	; 2
    2116:	8c 93       	st	X, r24
    2118:	12 97       	sbiw	r26, 0x02	; 2
    211a:	c8 c0       	rjmp	.+400    	; 0x22ac <DIO_u8setPinValue+0x242>
			case PORT_B : CLR_BIT(DIOB->PORT,Copy_u8pin);break;
    211c:	a6 e3       	ldi	r26, 0x36	; 54
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e6 e3       	ldi	r30, 0x36	; 54
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	48 2f       	mov	r20, r24
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_u8setPinValue+0xd0>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_u8setPinValue+0xcc>
    213e:	80 95       	com	r24
    2140:	84 23       	and	r24, r20
    2142:	12 96       	adiw	r26, 0x02	; 2
    2144:	8c 93       	st	X, r24
    2146:	12 97       	sbiw	r26, 0x02	; 2
    2148:	b1 c0       	rjmp	.+354    	; 0x22ac <DIO_u8setPinValue+0x242>
			case PORT_C : CLR_BIT(DIOC->PORT,Copy_u8pin);break;
    214a:	a3 e3       	ldi	r26, 0x33	; 51
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e3 e3       	ldi	r30, 0x33	; 51
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	48 2f       	mov	r20, r24
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <DIO_u8setPinValue+0xfe>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <DIO_u8setPinValue+0xfa>
    216c:	80 95       	com	r24
    216e:	84 23       	and	r24, r20
    2170:	12 96       	adiw	r26, 0x02	; 2
    2172:	8c 93       	st	X, r24
    2174:	12 97       	sbiw	r26, 0x02	; 2
    2176:	9a c0       	rjmp	.+308    	; 0x22ac <DIO_u8setPinValue+0x242>
			case PORT_D : CLR_BIT(DIOD->PORT,Copy_u8pin);break;
    2178:	a0 e3       	ldi	r26, 0x30	; 48
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e0 e3       	ldi	r30, 0x30	; 48
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	48 2f       	mov	r20, r24
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 2e       	mov	r0, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_u8setPinValue+0x12c>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	0a 94       	dec	r0
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <DIO_u8setPinValue+0x128>
    219a:	80 95       	com	r24
    219c:	84 23       	and	r24, r20
    219e:	12 96       	adiw	r26, 0x02	; 2
    21a0:	8c 93       	st	X, r24
    21a2:	12 97       	sbiw	r26, 0x02	; 2
    21a4:	83 c0       	rjmp	.+262    	; 0x22ac <DIO_u8setPinValue+0x242>
			default : Local_u8errStatus = RT_NOK;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	80 c0       	rjmp	.+256    	; 0x22ac <DIO_u8setPinValue+0x242>
			}
			break;
			case HIGH :
				switch(Copy_u8port)
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3e 83       	std	Y+6, r19	; 0x06
    21b4:	2d 83       	std	Y+5, r18	; 0x05
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	91 05       	cpc	r25, r1
    21be:	61 f1       	breq	.+88     	; 0x2218 <DIO_u8setPinValue+0x1ae>
    21c0:	2d 81       	ldd	r18, Y+5	; 0x05
    21c2:	3e 81       	ldd	r19, Y+6	; 0x06
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <DIO_u8setPinValue+0x16a>
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f0       	breq	.+26     	; 0x21ec <DIO_u8setPinValue+0x182>
    21d2:	64 c0       	rjmp	.+200    	; 0x229c <DIO_u8setPinValue+0x232>
    21d4:	2d 81       	ldd	r18, Y+5	; 0x05
    21d6:	3e 81       	ldd	r19, Y+6	; 0x06
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	99 f1       	breq	.+102    	; 0x2244 <DIO_u8setPinValue+0x1da>
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	91 05       	cpc	r25, r1
    21e6:	09 f4       	brne	.+2      	; 0x21ea <DIO_u8setPinValue+0x180>
    21e8:	43 c0       	rjmp	.+134    	; 0x2270 <DIO_u8setPinValue+0x206>
    21ea:	58 c0       	rjmp	.+176    	; 0x229c <DIO_u8setPinValue+0x232>
				{
				case PORT_A : SET_BIT(DIOA->PORT,Copy_u8pin);break;
    21ec:	a9 e3       	ldi	r26, 0x39	; 57
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e9 e3       	ldi	r30, 0x39	; 57
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	48 2f       	mov	r20, r24
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 2e       	mov	r0, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <DIO_u8setPinValue+0x1a0>
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	0a 94       	dec	r0
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <DIO_u8setPinValue+0x19c>
    220e:	84 2b       	or	r24, r20
    2210:	12 96       	adiw	r26, 0x02	; 2
    2212:	8c 93       	st	X, r24
    2214:	12 97       	sbiw	r26, 0x02	; 2
    2216:	4a c0       	rjmp	.+148    	; 0x22ac <DIO_u8setPinValue+0x242>
				case PORT_B : SET_BIT(DIOB->PORT,Copy_u8pin);break;
    2218:	a6 e3       	ldi	r26, 0x36	; 54
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e6 e3       	ldi	r30, 0x36	; 54
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	48 2f       	mov	r20, r24
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 2e       	mov	r0, r18
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <DIO_u8setPinValue+0x1cc>
    2232:	88 0f       	add	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	0a 94       	dec	r0
    2238:	e2 f7       	brpl	.-8      	; 0x2232 <DIO_u8setPinValue+0x1c8>
    223a:	84 2b       	or	r24, r20
    223c:	12 96       	adiw	r26, 0x02	; 2
    223e:	8c 93       	st	X, r24
    2240:	12 97       	sbiw	r26, 0x02	; 2
    2242:	34 c0       	rjmp	.+104    	; 0x22ac <DIO_u8setPinValue+0x242>
				case PORT_C : SET_BIT(DIOC->PORT,Copy_u8pin);break;
    2244:	a3 e3       	ldi	r26, 0x33	; 51
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e3 e3       	ldi	r30, 0x33	; 51
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	48 2f       	mov	r20, r24
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 2e       	mov	r0, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <DIO_u8setPinValue+0x1f8>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0a 94       	dec	r0
    2264:	e2 f7       	brpl	.-8      	; 0x225e <DIO_u8setPinValue+0x1f4>
    2266:	84 2b       	or	r24, r20
    2268:	12 96       	adiw	r26, 0x02	; 2
    226a:	8c 93       	st	X, r24
    226c:	12 97       	sbiw	r26, 0x02	; 2
    226e:	1e c0       	rjmp	.+60     	; 0x22ac <DIO_u8setPinValue+0x242>
				case PORT_D : SET_BIT(DIOD->PORT,Copy_u8pin);break;
    2270:	a0 e3       	ldi	r26, 0x30	; 48
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e0 e3       	ldi	r30, 0x30	; 48
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	48 2f       	mov	r20, r24
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	02 2e       	mov	r0, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <DIO_u8setPinValue+0x224>
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	0a 94       	dec	r0
    2290:	e2 f7       	brpl	.-8      	; 0x228a <DIO_u8setPinValue+0x220>
    2292:	84 2b       	or	r24, r20
    2294:	12 96       	adiw	r26, 0x02	; 2
    2296:	8c 93       	st	X, r24
    2298:	12 97       	sbiw	r26, 0x02	; 2
    229a:	08 c0       	rjmp	.+16     	; 0x22ac <DIO_u8setPinValue+0x242>
				default : Local_u8errStatus = RT_NOK;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <DIO_u8setPinValue+0x242>
				}
				break;
				default : Local_u8errStatus = RT_NOK;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <DIO_u8setPinValue+0x242>
		}

	}
	else
	{
		Local_u8errStatus = RT_NOK;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ae:	2a 96       	adiw	r28, 0x0a	; 10
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <DIO_u8togglePinValue>:
u8 DIO_u8togglePinValue(u8 Copy_u8port, u8 Copy_u8pin)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <DIO_u8togglePinValue+0x6>
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <DIO_u8togglePinValue+0x8>
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	8a 83       	std	Y+2, r24	; 0x02
    22d0:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8errStatus = RT_OK;
    22d2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 30       	cpi	r24, 0x08	; 8
    22d8:	08 f0       	brcs	.+2      	; 0x22dc <DIO_u8togglePinValue+0x1c>
    22da:	7b c0       	rjmp	.+246    	; 0x23d2 <DIO_u8togglePinValue+0x112>
	{

		switch(Copy_u8port)
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	3d 83       	std	Y+5, r19	; 0x05
    22e4:	2c 83       	std	Y+4, r18	; 0x04
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	91 05       	cpc	r25, r1
    22ee:	61 f1       	breq	.+88     	; 0x2348 <DIO_u8togglePinValue+0x88>
    22f0:	2c 81       	ldd	r18, Y+4	; 0x04
    22f2:	3d 81       	ldd	r19, Y+5	; 0x05
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	2c f4       	brge	.+10     	; 0x2304 <DIO_u8togglePinValue+0x44>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	69 f0       	breq	.+26     	; 0x231c <DIO_u8togglePinValue+0x5c>
    2302:	64 c0       	rjmp	.+200    	; 0x23cc <DIO_u8togglePinValue+0x10c>
    2304:	2c 81       	ldd	r18, Y+4	; 0x04
    2306:	3d 81       	ldd	r19, Y+5	; 0x05
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	99 f1       	breq	.+102    	; 0x2374 <DIO_u8togglePinValue+0xb4>
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	83 30       	cpi	r24, 0x03	; 3
    2314:	91 05       	cpc	r25, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <DIO_u8togglePinValue+0x5a>
    2318:	43 c0       	rjmp	.+134    	; 0x23a0 <DIO_u8togglePinValue+0xe0>
    231a:	58 c0       	rjmp	.+176    	; 0x23cc <DIO_u8togglePinValue+0x10c>
		{
		case PORT_A : TOG_BIT(DIOA->PORT,Copy_u8pin);break;
    231c:	a9 e3       	ldi	r26, 0x39	; 57
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e9 e3       	ldi	r30, 0x39	; 57
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	48 2f       	mov	r20, r24
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 2e       	mov	r0, r18
    2334:	02 c0       	rjmp	.+4      	; 0x233a <DIO_u8togglePinValue+0x7a>
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	0a 94       	dec	r0
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <DIO_u8togglePinValue+0x76>
    233e:	84 27       	eor	r24, r20
    2340:	12 96       	adiw	r26, 0x02	; 2
    2342:	8c 93       	st	X, r24
    2344:	12 97       	sbiw	r26, 0x02	; 2
    2346:	47 c0       	rjmp	.+142    	; 0x23d6 <DIO_u8togglePinValue+0x116>
		case PORT_B : TOG_BIT(DIOB->PORT,Copy_u8pin);break;
    2348:	a6 e3       	ldi	r26, 0x36	; 54
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	e6 e3       	ldi	r30, 0x36	; 54
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	48 2f       	mov	r20, r24
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	02 2e       	mov	r0, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <DIO_u8togglePinValue+0xa6>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	0a 94       	dec	r0
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <DIO_u8togglePinValue+0xa2>
    236a:	84 27       	eor	r24, r20
    236c:	12 96       	adiw	r26, 0x02	; 2
    236e:	8c 93       	st	X, r24
    2370:	12 97       	sbiw	r26, 0x02	; 2
    2372:	31 c0       	rjmp	.+98     	; 0x23d6 <DIO_u8togglePinValue+0x116>
		case PORT_C : TOG_BIT(DIOC->PORT,Copy_u8pin);break;
    2374:	a3 e3       	ldi	r26, 0x33	; 51
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e3 e3       	ldi	r30, 0x33	; 51
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	48 2f       	mov	r20, r24
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <DIO_u8togglePinValue+0xd2>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <DIO_u8togglePinValue+0xce>
    2396:	84 27       	eor	r24, r20
    2398:	12 96       	adiw	r26, 0x02	; 2
    239a:	8c 93       	st	X, r24
    239c:	12 97       	sbiw	r26, 0x02	; 2
    239e:	1b c0       	rjmp	.+54     	; 0x23d6 <DIO_u8togglePinValue+0x116>
		case PORT_D : TOG_BIT(DIOD->PORT,Copy_u8pin);break;
    23a0:	a0 e3       	ldi	r26, 0x30	; 48
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e0 e3       	ldi	r30, 0x30	; 48
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	48 2f       	mov	r20, r24
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	02 2e       	mov	r0, r18
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <DIO_u8togglePinValue+0xfe>
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	0a 94       	dec	r0
    23c0:	e2 f7       	brpl	.-8      	; 0x23ba <DIO_u8togglePinValue+0xfa>
    23c2:	84 27       	eor	r24, r20
    23c4:	12 96       	adiw	r26, 0x02	; 2
    23c6:	8c 93       	st	X, r24
    23c8:	12 97       	sbiw	r26, 0x02	; 2
    23ca:	05 c0       	rjmp	.+10     	; 0x23d6 <DIO_u8togglePinValue+0x116>
		default : Local_u8errStatus = RT_NOK;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <DIO_u8togglePinValue+0x116>
		}
	}

	else
	{
		Local_u8errStatus = RT_NOK;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01

}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <DIO_u8getPinValue>:
u8 DIO_u8getPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 * Copy_u8pValue)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	27 97       	sbiw	r28, 0x07	; 7
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	8a 83       	std	Y+2, r24	; 0x02
    23fe:	6b 83       	std	Y+3, r22	; 0x03
    2400:	5d 83       	std	Y+5, r21	; 0x05
    2402:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    2404:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pValue != NULL)
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	09 f4       	brne	.+2      	; 0x2410 <DIO_u8getPinValue+0x28>
    240e:	7b c0       	rjmp	.+246    	; 0x2506 <DIO_u8getPinValue+0x11e>
	{
		if(Copy_u8pin <=PIN_7)
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	88 30       	cpi	r24, 0x08	; 8
    2414:	08 f0       	brcs	.+2      	; 0x2418 <DIO_u8getPinValue+0x30>
    2416:	74 c0       	rjmp	.+232    	; 0x2500 <DIO_u8getPinValue+0x118>
		{
			switch(Copy_u8port)
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	3f 83       	std	Y+7, r19	; 0x07
    2420:	2e 83       	std	Y+6, r18	; 0x06
    2422:	4e 81       	ldd	r20, Y+6	; 0x06
    2424:	5f 81       	ldd	r21, Y+7	; 0x07
    2426:	41 30       	cpi	r20, 0x01	; 1
    2428:	51 05       	cpc	r21, r1
    242a:	59 f1       	breq	.+86     	; 0x2482 <DIO_u8getPinValue+0x9a>
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	9f 81       	ldd	r25, Y+7	; 0x07
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	91 05       	cpc	r25, r1
    2434:	34 f4       	brge	.+12     	; 0x2442 <DIO_u8getPinValue+0x5a>
    2436:	2e 81       	ldd	r18, Y+6	; 0x06
    2438:	3f 81       	ldd	r19, Y+7	; 0x07
    243a:	21 15       	cp	r18, r1
    243c:	31 05       	cpc	r19, r1
    243e:	69 f0       	breq	.+26     	; 0x245a <DIO_u8getPinValue+0x72>
    2440:	5c c0       	rjmp	.+184    	; 0x24fa <DIO_u8getPinValue+0x112>
    2442:	4e 81       	ldd	r20, Y+6	; 0x06
    2444:	5f 81       	ldd	r21, Y+7	; 0x07
    2446:	42 30       	cpi	r20, 0x02	; 2
    2448:	51 05       	cpc	r21, r1
    244a:	79 f1       	breq	.+94     	; 0x24aa <DIO_u8getPinValue+0xc2>
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	83 30       	cpi	r24, 0x03	; 3
    2452:	91 05       	cpc	r25, r1
    2454:	09 f4       	brne	.+2      	; 0x2458 <DIO_u8getPinValue+0x70>
    2456:	3d c0       	rjmp	.+122    	; 0x24d2 <DIO_u8getPinValue+0xea>
    2458:	50 c0       	rjmp	.+160    	; 0x24fa <DIO_u8getPinValue+0x112>
			{
			case PORT_A :* Copy_u8pValue=GET_BIT(DIOA->PIN,Copy_u8pin);break ;
    245a:	e9 e3       	ldi	r30, 0x39	; 57
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a9 01       	movw	r20, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <DIO_u8getPinValue+0x8a>
    246e:	55 95       	asr	r21
    2470:	47 95       	ror	r20
    2472:	8a 95       	dec	r24
    2474:	e2 f7       	brpl	.-8      	; 0x246e <DIO_u8getPinValue+0x86>
    2476:	ca 01       	movw	r24, r20
    2478:	81 70       	andi	r24, 0x01	; 1
    247a:	ec 81       	ldd	r30, Y+4	; 0x04
    247c:	fd 81       	ldd	r31, Y+5	; 0x05
    247e:	80 83       	st	Z, r24
    2480:	44 c0       	rjmp	.+136    	; 0x250a <DIO_u8getPinValue+0x122>
			case PORT_B :* Copy_u8pValue=GET_BIT(DIOB->PIN,Copy_u8pin);break ;
    2482:	e6 e3       	ldi	r30, 0x36	; 54
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	a9 01       	movw	r20, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <DIO_u8getPinValue+0xb2>
    2496:	55 95       	asr	r21
    2498:	47 95       	ror	r20
    249a:	8a 95       	dec	r24
    249c:	e2 f7       	brpl	.-8      	; 0x2496 <DIO_u8getPinValue+0xae>
    249e:	ca 01       	movw	r24, r20
    24a0:	81 70       	andi	r24, 0x01	; 1
    24a2:	ec 81       	ldd	r30, Y+4	; 0x04
    24a4:	fd 81       	ldd	r31, Y+5	; 0x05
    24a6:	80 83       	st	Z, r24
    24a8:	30 c0       	rjmp	.+96     	; 0x250a <DIO_u8getPinValue+0x122>
			case PORT_C :* Copy_u8pValue=GET_BIT(DIOC->PIN,Copy_u8pin);break ;
    24aa:	e3 e3       	ldi	r30, 0x33	; 51
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a9 01       	movw	r20, r18
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <DIO_u8getPinValue+0xda>
    24be:	55 95       	asr	r21
    24c0:	47 95       	ror	r20
    24c2:	8a 95       	dec	r24
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <DIO_u8getPinValue+0xd6>
    24c6:	ca 01       	movw	r24, r20
    24c8:	81 70       	andi	r24, 0x01	; 1
    24ca:	ec 81       	ldd	r30, Y+4	; 0x04
    24cc:	fd 81       	ldd	r31, Y+5	; 0x05
    24ce:	80 83       	st	Z, r24
    24d0:	1c c0       	rjmp	.+56     	; 0x250a <DIO_u8getPinValue+0x122>
			case PORT_D :* Copy_u8pValue=GET_BIT(DIOD->PIN,Copy_u8pin);break ;
    24d2:	e0 e3       	ldi	r30, 0x30	; 48
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a9 01       	movw	r20, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <DIO_u8getPinValue+0x102>
    24e6:	55 95       	asr	r21
    24e8:	47 95       	ror	r20
    24ea:	8a 95       	dec	r24
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <DIO_u8getPinValue+0xfe>
    24ee:	ca 01       	movw	r24, r20
    24f0:	81 70       	andi	r24, 0x01	; 1
    24f2:	ec 81       	ldd	r30, Y+4	; 0x04
    24f4:	fd 81       	ldd	r31, Y+5	; 0x05
    24f6:	80 83       	st	Z, r24
    24f8:	08 c0       	rjmp	.+16     	; 0x250a <DIO_u8getPinValue+0x122>
			default : Local_u8errStatus = RT_NOK ;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	05 c0       	rjmp	.+10     	; 0x250a <DIO_u8getPinValue+0x122>
			}
		}
		else
		{
			Local_u8errStatus = RT_NOK;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	02 c0       	rjmp	.+4      	; 0x250a <DIO_u8getPinValue+0x122>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
}
    250c:	27 96       	adiw	r28, 0x07	; 7
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <PRV_voidEnableTriggerWrite>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character);
void LCD_4_BitvidsendCommand(u8 Copy_u8command);
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character);

static void PRV_voidEnableTriggerWrite(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	2e 97       	sbiw	r28, 0x0e	; 14
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
	/* Enable Pulse *//* H => L */
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e8       	ldi	r26, 0x80	; 128
    2542:	bf e3       	ldi	r27, 0x3F	; 63
    2544:	8b 87       	std	Y+11, r24	; 0x0b
    2546:	9c 87       	std	Y+12, r25	; 0x0c
    2548:	ad 87       	std	Y+13, r26	; 0x0d
    254a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	6b 85       	ldd	r22, Y+11	; 0x0b
    254e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2550:	8d 85       	ldd	r24, Y+13	; 0x0d
    2552:	9e 85       	ldd	r25, Y+14	; 0x0e
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a ef       	ldi	r20, 0xFA	; 250
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8f 83       	std	Y+7, r24	; 0x07
    2566:	98 87       	std	Y+8, r25	; 0x08
    2568:	a9 87       	std	Y+9, r26	; 0x09
    256a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	2c f4       	brge	.+10     	; 0x258e <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	3f c0       	rjmp	.+126    	; 0x260c <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	3f ef       	ldi	r19, 0xFF	; 255
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	57 e4       	ldi	r21, 0x47	; 71
    259e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	4c f5       	brge	.+82     	; 0x25f8 <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <PRV_voidEnableTriggerWrite+0xd0>
    25d0:	88 ec       	ldi	r24, 0xC8	; 200
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <PRV_voidEnableTriggerWrite+0xbe>
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	69 f7       	brne	.-38     	; 0x25d0 <PRV_voidEnableTriggerWrite+0xb2>
    25f6:	14 c0       	rjmp	.+40     	; 0x2620 <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	8d 81       	ldd	r24, Y+5	; 0x05
    260e:	9e 81       	ldd	r25, Y+6	; 0x06
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <PRV_voidEnableTriggerWrite+0xfa>
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
}
    262a:	2e 96       	adiw	r28, 0x0e	; 14
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort(u8 copy_u8Value)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	0f 92       	push	r0
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	89 83       	std	Y+1, r24	; 0x01
	if(0 == GET_BIT(copy_u8Value,0))
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	81 70       	andi	r24, 0x01	; 1
    2650:	90 70       	andi	r25, 0x00	; 0
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	31 f4       	brne	.+12     	; 0x2662 <PRV_voidWriteHalfPort+0x26>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_4, LOW);
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	64 e0       	ldi	r22, 0x04	; 4
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    2660:	05 c0       	rjmp	.+10     	; 0x266c <PRV_voidWriteHalfPort+0x30>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_4, HIGH);
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	64 e0       	ldi	r22, 0x04	; 4
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	}
	if(0 == GET_BIT(copy_u8Value,1))
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	86 95       	lsr	r24
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	81 70       	andi	r24, 0x01	; 1
    2676:	90 70       	andi	r25, 0x00	; 0
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	31 f4       	brne	.+12     	; 0x2688 <PRV_voidWriteHalfPort+0x4c>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_5, LOW);
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	65 e0       	ldi	r22, 0x05	; 5
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    2686:	05 c0       	rjmp	.+10     	; 0x2692 <PRV_voidWriteHalfPort+0x56>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_5, HIGH);
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	65 e0       	ldi	r22, 0x05	; 5
    268c:	41 e0       	ldi	r20, 0x01	; 1
    268e:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	}
	if(0 == GET_BIT(copy_u8Value,2))
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	86 95       	lsr	r24
    2696:	86 95       	lsr	r24
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	81 70       	andi	r24, 0x01	; 1
    269e:	90 70       	andi	r25, 0x00	; 0
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	31 f4       	brne	.+12     	; 0x26b0 <PRV_voidWriteHalfPort+0x74>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_6, LOW);
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	66 e0       	ldi	r22, 0x06	; 6
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <PRV_voidWriteHalfPort+0x7e>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_6, HIGH);
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	66 e0       	ldi	r22, 0x06	; 6
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	}
	if(0 == GET_BIT(copy_u8Value,3))
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	86 95       	lsr	r24
    26be:	86 95       	lsr	r24
    26c0:	86 95       	lsr	r24
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	81 70       	andi	r24, 0x01	; 1
    26c8:	90 70       	andi	r25, 0x00	; 0
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	31 f4       	brne	.+12     	; 0x26da <PRV_voidWriteHalfPort+0x9e>
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_7, LOW);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	67 e0       	ldi	r22, 0x07	; 7
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    26d8:	05 c0       	rjmp	.+10     	; 0x26e4 <PRV_voidWriteHalfPort+0xa8>
	}
	else
	{
		DIO_u8setPinValue(LCD_DATA_PORT, PIN_7, HIGH);
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	67 e0       	ldi	r22, 0x07	; 7
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
     DIO_voidSetPinValue(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(copy_u8Value,0));
	 DIO_voidSetPinValue(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(copy_u8Value,1));
	 DIO_voidSetPinValue(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value,2));
	 DIO_voidSetPinValue(LCD_D7_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value,3));
	 */
}
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LCD_4_BitvidInit>:

void LCD_4_BitvidInit(void)
{
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	cc 54       	subi	r28, 0x4C	; 76
    26fa:	d0 40       	sbci	r29, 0x00	; 0
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_4, OUTPUT);
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	64 e0       	ldi	r22, 0x04	; 4
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_5, OUTPUT);
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	65 e0       	ldi	r22, 0x05	; 5
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_6, OUTPUT);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	66 e0       	ldi	r22, 0x06	; 6
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_DATA_PORT, PIN_7, OUTPUT);
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	67 e0       	ldi	r22, 0x07	; 7
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>

	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
    274c:	fe 01       	movw	r30, r28
    274e:	e7 5b       	subi	r30, 0xB7	; 183
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	ac e0       	ldi	r26, 0x0C	; 12
    2758:	b2 e4       	ldi	r27, 0x42	; 66
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	8e 01       	movw	r16, r28
    2764:	0b 5b       	subi	r16, 0xBB	; 187
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	e7 5b       	subi	r30, 0xB7	; 183
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a ef       	ldi	r20, 0xFA	; 250
    277c:	54 e4       	ldi	r21, 0x44	; 68
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2790:	fe 01       	movw	r30, r28
    2792:	eb 5b       	subi	r30, 0xBB	; 187
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	44 f4       	brge	.+16     	; 0x27be <LCD_4_BitvidInit+0xd2>
		__ticks = 1;
    27ae:	fe 01       	movw	r30, r28
    27b0:	ed 5b       	subi	r30, 0xBD	; 189
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	64 c0       	rjmp	.+200    	; 0x2886 <LCD_4_BitvidInit+0x19a>
	else if (__tmp > 65535)
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 5b       	subi	r30, 0xBB	; 187
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	0c f0       	brlt	.+2      	; 0x27de <LCD_4_BitvidInit+0xf2>
    27dc:	43 c0       	rjmp	.+134    	; 0x2864 <LCD_4_BitvidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	fe 01       	movw	r30, r28
    27e0:	e7 5b       	subi	r30, 0xB7	; 183
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	8e 01       	movw	r16, r28
    27fe:	0d 5b       	subi	r16, 0xBD	; 189
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	1f c0       	rjmp	.+62     	; 0x2854 <LCD_4_BitvidInit+0x168>
    2816:	fe 01       	movw	r30, r28
    2818:	ef 5b       	subi	r30, 0xBF	; 191
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	fe 01       	movw	r30, r28
    2826:	ef 5b       	subi	r30, 0xBF	; 191
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_4_BitvidInit+0x142>
    2832:	fe 01       	movw	r30, r28
    2834:	ef 5b       	subi	r30, 0xBF	; 191
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	de 01       	movw	r26, r28
    283e:	ad 5b       	subi	r26, 0xBD	; 189
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ed 5b       	subi	r30, 0xBD	; 189
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	fe 01       	movw	r30, r28
    2856:	ed 5b       	subi	r30, 0xBD	; 189
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	d1 f6       	brne	.-76     	; 0x2816 <LCD_4_BitvidInit+0x12a>
    2862:	24 c0       	rjmp	.+72     	; 0x28ac <LCD_4_BitvidInit+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	8e 01       	movw	r16, r28
    2866:	0d 5b       	subi	r16, 0xBD	; 189
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	fe 01       	movw	r30, r28
    286c:	eb 5b       	subi	r30, 0xBB	; 187
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	fe 01       	movw	r30, r28
    2888:	ed 5b       	subi	r30, 0xBD	; 189
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	fe 01       	movw	r30, r28
    2892:	ff 96       	adiw	r30, 0x3f	; 63
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
    2898:	fe 01       	movw	r30, r28
    289a:	ff 96       	adiw	r30, 0x3f	; 63
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_4_BitvidInit+0x1b4>
    28a4:	fe 01       	movw	r30, r28
    28a6:	ff 96       	adiw	r30, 0x3f	; 63
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
	_delay_ms(35);

	/* Function Set (2Lines, 5*7 font)*/
	// set Rs pin = 0 (command)
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	62 e0       	ldi	r22, 0x02	; 2
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	// set RW pin = 0 (write)
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	PRV_voidWriteHalfPort(0b0010);
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	0e 94 1e 13 	call	0x263c	; 0x263c <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    28c6:	0e 94 8f 12 	call	0x251e	; 0x251e <PRV_voidEnableTriggerWrite>
	LCD_4_BitvidsendCommand(0b00101000);
    28ca:	88 e2       	ldi	r24, 0x28	; 40
    28cc:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a4 e3       	ldi	r26, 0x34	; 52
    28d6:	b2 e4       	ldi	r27, 0x42	; 66
    28d8:	8b af       	std	Y+59, r24	; 0x3b
    28da:	9c af       	std	Y+60, r25	; 0x3c
    28dc:	ad af       	std	Y+61, r26	; 0x3d
    28de:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28e0:	6b ad       	ldd	r22, Y+59	; 0x3b
    28e2:	7c ad       	ldd	r23, Y+60	; 0x3c
    28e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e8:	2b ea       	ldi	r18, 0xAB	; 171
    28ea:	3a ea       	ldi	r19, 0xAA	; 170
    28ec:	4a e2       	ldi	r20, 0x2A	; 42
    28ee:	50 e4       	ldi	r21, 0x40	; 64
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8f ab       	std	Y+55, r24	; 0x37
    28fa:	98 af       	std	Y+56, r25	; 0x38
    28fc:	a9 af       	std	Y+57, r26	; 0x39
    28fe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2900:	6f a9       	ldd	r22, Y+55	; 0x37
    2902:	78 ad       	ldd	r23, Y+56	; 0x38
    2904:	89 ad       	ldd	r24, Y+57	; 0x39
    2906:	9a ad       	ldd	r25, Y+58	; 0x3a
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	1c f4       	brge	.+6      	; 0x291e <LCD_4_BitvidInit+0x232>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	8e ab       	std	Y+54, r24	; 0x36
    291c:	91 c0       	rjmp	.+290    	; 0x2a40 <LCD_4_BitvidInit+0x354>
	else if (__tmp > 255)
    291e:	6f a9       	ldd	r22, Y+55	; 0x37
    2920:	78 ad       	ldd	r23, Y+56	; 0x38
    2922:	89 ad       	ldd	r24, Y+57	; 0x39
    2924:	9a ad       	ldd	r25, Y+58	; 0x3a
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4f e7       	ldi	r20, 0x7F	; 127
    292c:	53 e4       	ldi	r21, 0x43	; 67
    292e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2932:	18 16       	cp	r1, r24
    2934:	0c f0       	brlt	.+2      	; 0x2938 <LCD_4_BitvidInit+0x24c>
    2936:	7b c0       	rjmp	.+246    	; 0x2a2e <LCD_4_BitvidInit+0x342>
	{
		_delay_ms(__us / 1000.0);
    2938:	6b ad       	ldd	r22, Y+59	; 0x3b
    293a:	7c ad       	ldd	r23, Y+60	; 0x3c
    293c:	8d ad       	ldd	r24, Y+61	; 0x3d
    293e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a e7       	ldi	r20, 0x7A	; 122
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8a ab       	std	Y+50, r24	; 0x32
    2952:	9b ab       	std	Y+51, r25	; 0x33
    2954:	ac ab       	std	Y+52, r26	; 0x34
    2956:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6a a9       	ldd	r22, Y+50	; 0x32
    295a:	7b a9       	ldd	r23, Y+51	; 0x33
    295c:	8c a9       	ldd	r24, Y+52	; 0x34
    295e:	9d a9       	ldd	r25, Y+53	; 0x35
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a ef       	ldi	r20, 0xFA	; 250
    2966:	54 e4       	ldi	r21, 0x44	; 68
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	8e a7       	std	Y+46, r24	; 0x2e
    2972:	9f a7       	std	Y+47, r25	; 0x2f
    2974:	a8 ab       	std	Y+48, r26	; 0x30
    2976:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2978:	6e a5       	ldd	r22, Y+46	; 0x2e
    297a:	7f a5       	ldd	r23, Y+47	; 0x2f
    297c:	88 a9       	ldd	r24, Y+48	; 0x30
    297e:	99 a9       	ldd	r25, Y+49	; 0x31
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <LCD_4_BitvidInit+0x2ae>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9d a7       	std	Y+45, r25	; 0x2d
    2996:	8c a7       	std	Y+44, r24	; 0x2c
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <LCD_4_BitvidInit+0x32c>
	else if (__tmp > 65535)
    299a:	6e a5       	ldd	r22, Y+46	; 0x2e
    299c:	7f a5       	ldd	r23, Y+47	; 0x2f
    299e:	88 a9       	ldd	r24, Y+48	; 0x30
    29a0:	99 a9       	ldd	r25, Y+49	; 0x31
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <LCD_4_BitvidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6a a9       	ldd	r22, Y+50	; 0x32
    29b4:	7b a9       	ldd	r23, Y+51	; 0x33
    29b6:	8c a9       	ldd	r24, Y+52	; 0x34
    29b8:	9d a9       	ldd	r25, Y+53	; 0x35
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9d a7       	std	Y+45, r25	; 0x2d
    29d8:	8c a7       	std	Y+44, r24	; 0x2c
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <LCD_4_BitvidInit+0x30e>
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9b a7       	std	Y+43, r25	; 0x2b
    29e2:	8a a7       	std	Y+42, r24	; 0x2a
    29e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    29e6:	9b a5       	ldd	r25, Y+43	; 0x2b
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_4_BitvidInit+0x2fc>
    29ec:	9b a7       	std	Y+43, r25	; 0x2b
    29ee:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    29f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	9d a7       	std	Y+45, r25	; 0x2d
    29f8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    29fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <LCD_4_BitvidInit+0x2f0>
    2a02:	24 c0       	rjmp	.+72     	; 0x2a4c <LCD_4_BitvidInit+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a06:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a08:	88 a9       	ldd	r24, Y+48	; 0x30
    2a0a:	99 a9       	ldd	r25, Y+49	; 0x31
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9d a7       	std	Y+45, r25	; 0x2d
    2a16:	8c a7       	std	Y+44, r24	; 0x2c
    2a18:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a1a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a1c:	99 a7       	std	Y+41, r25	; 0x29
    2a1e:	88 a7       	std	Y+40, r24	; 0x28
    2a20:	88 a5       	ldd	r24, Y+40	; 0x28
    2a22:	99 a5       	ldd	r25, Y+41	; 0x29
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_4_BitvidInit+0x338>
    2a28:	99 a7       	std	Y+41, r25	; 0x29
    2a2a:	88 a7       	std	Y+40, r24	; 0x28
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_4_BitvidInit+0x360>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a2e:	6f a9       	ldd	r22, Y+55	; 0x37
    2a30:	78 ad       	ldd	r23, Y+56	; 0x38
    2a32:	89 ad       	ldd	r24, Y+57	; 0x39
    2a34:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	8e ab       	std	Y+54, r24	; 0x36
    2a40:	8e a9       	ldd	r24, Y+54	; 0x36
    2a42:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a44:	8f a1       	ldd	r24, Y+39	; 0x27
    2a46:	8a 95       	dec	r24
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_4_BitvidInit+0x35a>
    2a4a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);

	/* Display On/Off Control (DisplayOn, Cursor on, Blink on) */
	LCD_4_BitvidsendCommand(0b00001111);
    2a4c:	8f e0       	ldi	r24, 0x0F	; 15
    2a4e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a4 e3       	ldi	r26, 0x34	; 52
    2a58:	b2 e4       	ldi	r27, 0x42	; 66
    2a5a:	8b a3       	std	Y+35, r24	; 0x23
    2a5c:	9c a3       	std	Y+36, r25	; 0x24
    2a5e:	ad a3       	std	Y+37, r26	; 0x25
    2a60:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a62:	6b a1       	ldd	r22, Y+35	; 0x23
    2a64:	7c a1       	ldd	r23, Y+36	; 0x24
    2a66:	8d a1       	ldd	r24, Y+37	; 0x25
    2a68:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6a:	2b ea       	ldi	r18, 0xAB	; 171
    2a6c:	3a ea       	ldi	r19, 0xAA	; 170
    2a6e:	4a e2       	ldi	r20, 0x2A	; 42
    2a70:	50 e4       	ldi	r21, 0x40	; 64
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a7c:	98 a3       	std	Y+32, r25	; 0x20
    2a7e:	a9 a3       	std	Y+33, r26	; 0x21
    2a80:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a84:	78 a1       	ldd	r23, Y+32	; 0x20
    2a86:	89 a1       	ldd	r24, Y+33	; 0x21
    2a88:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	1c f4       	brge	.+6      	; 0x2aa0 <LCD_4_BitvidInit+0x3b4>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a9e:	91 c0       	rjmp	.+290    	; 0x2bc2 <LCD_4_BitvidInit+0x4d6>
	else if (__tmp > 255)
    2aa0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2aa2:	78 a1       	ldd	r23, Y+32	; 0x20
    2aa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	53 e4       	ldi	r21, 0x43	; 67
    2ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	0c f0       	brlt	.+2      	; 0x2aba <LCD_4_BitvidInit+0x3ce>
    2ab8:	7b c0       	rjmp	.+246    	; 0x2bb0 <LCD_4_BitvidInit+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    2aba:	6b a1       	ldd	r22, Y+35	; 0x23
    2abc:	7c a1       	ldd	r23, Y+36	; 0x24
    2abe:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a e7       	ldi	r20, 0x7A	; 122
    2ac8:	54 e4       	ldi	r21, 0x44	; 68
    2aca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	8a 8f       	std	Y+26, r24	; 0x1a
    2ad4:	9b 8f       	std	Y+27, r25	; 0x1b
    2ad6:	ac 8f       	std	Y+28, r26	; 0x1c
    2ad8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ada:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2adc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ade:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ae0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	4a ef       	ldi	r20, 0xFA	; 250
    2ae8:	54 e4       	ldi	r21, 0x44	; 68
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8e 8b       	std	Y+22, r24	; 0x16
    2af4:	9f 8b       	std	Y+23, r25	; 0x17
    2af6:	a8 8f       	std	Y+24, r26	; 0x18
    2af8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2afa:	6e 89       	ldd	r22, Y+22	; 0x16
    2afc:	7f 89       	ldd	r23, Y+23	; 0x17
    2afe:	88 8d       	ldd	r24, Y+24	; 0x18
    2b00:	99 8d       	ldd	r25, Y+25	; 0x19
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e8       	ldi	r20, 0x80	; 128
    2b08:	5f e3       	ldi	r21, 0x3F	; 63
    2b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b0e:	88 23       	and	r24, r24
    2b10:	2c f4       	brge	.+10     	; 0x2b1c <LCD_4_BitvidInit+0x430>
		__ticks = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9d 8b       	std	Y+21, r25	; 0x15
    2b18:	8c 8b       	std	Y+20, r24	; 0x14
    2b1a:	3f c0       	rjmp	.+126    	; 0x2b9a <LCD_4_BitvidInit+0x4ae>
	else if (__tmp > 65535)
    2b1c:	6e 89       	ldd	r22, Y+22	; 0x16
    2b1e:	7f 89       	ldd	r23, Y+23	; 0x17
    2b20:	88 8d       	ldd	r24, Y+24	; 0x18
    2b22:	99 8d       	ldd	r25, Y+25	; 0x19
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	4c f5       	brge	.+82     	; 0x2b86 <LCD_4_BitvidInit+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b34:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b36:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e2       	ldi	r20, 0x20	; 32
    2b42:	51 e4       	ldi	r21, 0x41	; 65
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9d 8b       	std	Y+21, r25	; 0x15
    2b5a:	8c 8b       	std	Y+20, r24	; 0x14
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCD_4_BitvidInit+0x490>
    2b5e:	88 ec       	ldi	r24, 0xC8	; 200
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9b 8b       	std	Y+19, r25	; 0x13
    2b64:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b66:	8a 89       	ldd	r24, Y+18	; 0x12
    2b68:	9b 89       	ldd	r25, Y+19	; 0x13
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_4_BitvidInit+0x47e>
    2b6e:	9b 8b       	std	Y+19, r25	; 0x13
    2b70:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	8c 89       	ldd	r24, Y+20	; 0x14
    2b74:	9d 89       	ldd	r25, Y+21	; 0x15
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	9d 8b       	std	Y+21, r25	; 0x15
    2b7a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b7e:	9d 89       	ldd	r25, Y+21	; 0x15
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	69 f7       	brne	.-38     	; 0x2b5e <LCD_4_BitvidInit+0x472>
    2b84:	24 c0       	rjmp	.+72     	; 0x2bce <LCD_4_BitvidInit+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b86:	6e 89       	ldd	r22, Y+22	; 0x16
    2b88:	7f 89       	ldd	r23, Y+23	; 0x17
    2b8a:	88 8d       	ldd	r24, Y+24	; 0x18
    2b8c:	99 8d       	ldd	r25, Y+25	; 0x19
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9d 8b       	std	Y+21, r25	; 0x15
    2b98:	8c 8b       	std	Y+20, r24	; 0x14
    2b9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2b9c:	9d 89       	ldd	r25, Y+21	; 0x15
    2b9e:	99 8b       	std	Y+17, r25	; 0x11
    2ba0:	88 8b       	std	Y+16, r24	; 0x10
    2ba2:	88 89       	ldd	r24, Y+16	; 0x10
    2ba4:	99 89       	ldd	r25, Y+17	; 0x11
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_4_BitvidInit+0x4ba>
    2baa:	99 8b       	std	Y+17, r25	; 0x11
    2bac:	88 8b       	std	Y+16, r24	; 0x10
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <LCD_4_BitvidInit+0x4e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bb0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bb2:	78 a1       	ldd	r23, Y+32	; 0x20
    2bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	8e 8f       	std	Y+30, r24	; 0x1e
    2bc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc8:	8a 95       	dec	r24
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <LCD_4_BitvidInit+0x4dc>
    2bcc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	/* Display Clear */
	LCD_4_BitvidsendCommand(0b00000001);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e4       	ldi	r27, 0x40	; 64
    2bdc:	8b 87       	std	Y+11, r24	; 0x0b
    2bde:	9c 87       	std	Y+12, r25	; 0x0c
    2be0:	ad 87       	std	Y+13, r26	; 0x0d
    2be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a ef       	ldi	r20, 0xFA	; 250
    2bf2:	54 e4       	ldi	r21, 0x44	; 68
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8f 83       	std	Y+7, r24	; 0x07
    2bfe:	98 87       	std	Y+8, r25	; 0x08
    2c00:	a9 87       	std	Y+9, r26	; 0x09
    2c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <LCD_4_BitvidInit+0x53a>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <LCD_4_BitvidInit+0x5b8>
	else if (__tmp > 65535)
    2c26:	6f 81       	ldd	r22, Y+7	; 0x07
    2c28:	78 85       	ldd	r23, Y+8	; 0x08
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <LCD_4_BitvidInit+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9e 83       	std	Y+6, r25	; 0x06
    2c64:	8d 83       	std	Y+5, r24	; 0x05
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <LCD_4_BitvidInit+0x59a>
    2c68:	88 ec       	ldi	r24, 0xC8	; 200
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <LCD_4_BitvidInit+0x588>
    2c78:	9c 83       	std	Y+4, r25	; 0x04
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <LCD_4_BitvidInit+0x57c>
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <LCD_4_BitvidInit+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <LCD_4_BitvidInit+0x5c4>
    2cb4:	9a 83       	std	Y+2, r25	; 0x02
    2cb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* Entery Mode Set (Increment on, Shift off) */
	LCD_4_BitvidsendCommand(0b00000110);
    2cb8:	86 e0       	ldi	r24, 0x06	; 6
    2cba:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
}
    2cbe:	c4 5b       	subi	r28, 0xB4	; 180
    2cc0:	df 4f       	sbci	r29, 0xFF	; 255
    2cc2:	0f b6       	in	r0, 0x3f	; 63
    2cc4:	f8 94       	cli
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	0f be       	out	0x3f, r0	; 63
    2cca:	cd bf       	out	0x3d, r28	; 61
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	08 95       	ret

00002cd6 <LCD_4_BitvidsendCommand>:
void LCD_4_BitvidsendCommand(u8 Copy_u8command)
{
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	0f 92       	push	r0
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	89 83       	std	Y+1, r24	; 0x01
	// set Rs pin = 0 (command)
		DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	62 e0       	ldi	r22, 0x02	; 2
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>

		// set RW pin = 0 (write)
		DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2cec:	83 e0       	ldi	r24, 0x03	; 3
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>

		// Write The Most 4 bits Of command on Data Pins
		PRV_voidWriteHalfPort(Copy_u8command>>4);
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	82 95       	swap	r24
    2cfa:	8f 70       	andi	r24, 0x0F	; 15
    2cfc:	0e 94 1e 13 	call	0x263c	; 0x263c <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    2d00:	0e 94 8f 12 	call	0x251e	; 0x251e <PRV_voidEnableTriggerWrite>

		// Write The Least 4 bits Of command on Data Pins
		PRV_voidWriteHalfPort(Copy_u8command);
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	0e 94 1e 13 	call	0x263c	; 0x263c <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    2d0a:	0e 94 8f 12 	call	0x251e	; 0x251e <PRV_voidEnableTriggerWrite>
}
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <LCD_4_BitvidwriteCharacter>:

void LCD_4_BitvidwriteCharacter(u8 Copy_u8character)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	89 83       	std	Y+1, r24	; 0x01
	// set Rs pin = 1 (data)
		DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2d22:	83 e0       	ldi	r24, 0x03	; 3
    2d24:	62 e0       	ldi	r22, 0x02	; 2
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>

		// set RW pin = 0 (write)
		DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	61 e0       	ldi	r22, 0x01	; 1
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>

		// Write The Most 4 bits Of data on Data Pins
		PRV_voidWriteHalfPort(Copy_u8character>>4);
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	82 95       	swap	r24
    2d3a:	8f 70       	andi	r24, 0x0F	; 15
    2d3c:	0e 94 1e 13 	call	0x263c	; 0x263c <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    2d40:	0e 94 8f 12 	call	0x251e	; 0x251e <PRV_voidEnableTriggerWrite>

		// Write The Least 4 bits Of data on Data Pins
		PRV_voidWriteHalfPort(Copy_u8character);
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	0e 94 1e 13 	call	0x263c	; 0x263c <PRV_voidWriteHalfPort>

		/* Enable */
		PRV_voidEnableTriggerWrite();
    2d4a:	0e 94 8f 12 	call	0x251e	; 0x251e <PRV_voidEnableTriggerWrite>
}
    2d4e:	0f 90       	pop	r0
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <LCD_8_BitvidInit>:

void LCD_8_BitvidInit(void)
{
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	e8 97       	sbiw	r28, 0x38	; 56
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,FULL_OUTPUT);
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	6f ef       	ldi	r22, 0xFF	; 255
    2d6e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    2d72:	83 e0       	ldi	r24, 0x03	; 3
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    2d7c:	83 e0       	ldi	r24, 0x03	; 3
    2d7e:	61 e0       	ldi	r22, 0x01	; 1
    2d80:	41 e0       	ldi	r20, 0x01	; 1
    2d82:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 e2       	ldi	r26, 0x20	; 32
    2d96:	b2 e4       	ldi	r27, 0x42	; 66
    2d98:	8d ab       	std	Y+53, r24	; 0x35
    2d9a:	9e ab       	std	Y+54, r25	; 0x36
    2d9c:	af ab       	std	Y+55, r26	; 0x37
    2d9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da0:	6d a9       	ldd	r22, Y+53	; 0x35
    2da2:	7e a9       	ldd	r23, Y+54	; 0x36
    2da4:	8f a9       	ldd	r24, Y+55	; 0x37
    2da6:	98 ad       	ldd	r25, Y+56	; 0x38
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a ef       	ldi	r20, 0xFA	; 250
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	89 ab       	std	Y+49, r24	; 0x31
    2dba:	9a ab       	std	Y+50, r25	; 0x32
    2dbc:	ab ab       	std	Y+51, r26	; 0x33
    2dbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e8       	ldi	r20, 0x80	; 128
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd4:	88 23       	and	r24, r24
    2dd6:	2c f4       	brge	.+10     	; 0x2de2 <LCD_8_BitvidInit+0x8c>
		__ticks = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	98 ab       	std	Y+48, r25	; 0x30
    2dde:	8f a7       	std	Y+47, r24	; 0x2f
    2de0:	3f c0       	rjmp	.+126    	; 0x2e60 <LCD_8_BitvidInit+0x10a>
	else if (__tmp > 65535)
    2de2:	69 a9       	ldd	r22, Y+49	; 0x31
    2de4:	7a a9       	ldd	r23, Y+50	; 0x32
    2de6:	8b a9       	ldd	r24, Y+51	; 0x33
    2de8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	4c f5       	brge	.+82     	; 0x2e4c <LCD_8_BitvidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfa:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfc:	7e a9       	ldd	r23, Y+54	; 0x36
    2dfe:	8f a9       	ldd	r24, Y+55	; 0x37
    2e00:	98 ad       	ldd	r25, Y+56	; 0x38
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	51 e4       	ldi	r21, 0x41	; 65
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	98 ab       	std	Y+48, r25	; 0x30
    2e20:	8f a7       	std	Y+47, r24	; 0x2f
    2e22:	0f c0       	rjmp	.+30     	; 0x2e42 <LCD_8_BitvidInit+0xec>
    2e24:	88 ec       	ldi	r24, 0xC8	; 200
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9e a7       	std	Y+46, r25	; 0x2e
    2e2a:	8d a7       	std	Y+45, r24	; 0x2d
    2e2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_8_BitvidInit+0xda>
    2e34:	9e a7       	std	Y+46, r25	; 0x2e
    2e36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	98 ab       	std	Y+48, r25	; 0x30
    2e40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e44:	98 a9       	ldd	r25, Y+48	; 0x30
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	69 f7       	brne	.-38     	; 0x2e24 <LCD_8_BitvidInit+0xce>
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <LCD_8_BitvidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e50:	8b a9       	ldd	r24, Y+51	; 0x33
    2e52:	9c a9       	ldd	r25, Y+52	; 0x34
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	98 ab       	std	Y+48, r25	; 0x30
    2e5e:	8f a7       	std	Y+47, r24	; 0x2f
    2e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e62:	98 a9       	ldd	r25, Y+48	; 0x30
    2e64:	9c a7       	std	Y+44, r25	; 0x2c
    2e66:	8b a7       	std	Y+43, r24	; 0x2b
    2e68:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <LCD_8_BitvidInit+0x116>
    2e70:	9c a7       	std	Y+44, r25	; 0x2c
    2e72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_8_BitvidsendCommand(LCD_8_BIT_FUNCTION_SET_CMD);
    2e74:	88 e3       	ldi	r24, 0x38	; 56
    2e76:	0e 94 a5 18 	call	0x314a	; 0x314a <LCD_8_BitvidsendCommand>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 e8       	ldi	r26, 0x80	; 128
    2e80:	bf e3       	ldi	r27, 0x3F	; 63
    2e82:	8f a3       	std	Y+39, r24	; 0x27
    2e84:	98 a7       	std	Y+40, r25	; 0x28
    2e86:	a9 a7       	std	Y+41, r26	; 0x29
    2e88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8b a3       	std	Y+35, r24	; 0x23
    2ea4:	9c a3       	std	Y+36, r25	; 0x24
    2ea6:	ad a3       	std	Y+37, r26	; 0x25
    2ea8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2eac:	7c a1       	ldd	r23, Y+36	; 0x24
    2eae:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <LCD_8_BitvidInit+0x176>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9a a3       	std	Y+34, r25	; 0x22
    2ec8:	89 a3       	std	Y+33, r24	; 0x21
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <LCD_8_BitvidInit+0x1f4>
	else if (__tmp > 65535)
    2ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ece:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <LCD_8_BitvidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9a a3       	std	Y+34, r25	; 0x22
    2f0a:	89 a3       	std	Y+33, r24	; 0x21
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <LCD_8_BitvidInit+0x1d6>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	98 a3       	std	Y+32, r25	; 0x20
    2f14:	8f 8f       	std	Y+31, r24	; 0x1f
    2f16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f18:	98 a1       	ldd	r25, Y+32	; 0x20
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <LCD_8_BitvidInit+0x1c4>
    2f1e:	98 a3       	std	Y+32, r25	; 0x20
    2f20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	89 a1       	ldd	r24, Y+33	; 0x21
    2f24:	9a a1       	ldd	r25, Y+34	; 0x22
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9a a3       	std	Y+34, r25	; 0x22
    2f2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <LCD_8_BitvidInit+0x1b8>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <LCD_8_BitvidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6b a1       	ldd	r22, Y+35	; 0x23
    2f38:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9a a3       	std	Y+34, r25	; 0x22
    2f48:	89 a3       	std	Y+33, r24	; 0x21
    2f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f50:	8d 8f       	std	Y+29, r24	; 0x1d
    2f52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_8_BitvidInit+0x200>
    2f5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_ON_CMD);
    2f5e:	8c e0       	ldi	r24, 0x0C	; 12
    2f60:	0e 94 a5 18 	call	0x314a	; 0x314a <LCD_8_BitvidsendCommand>
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a0 e8       	ldi	r26, 0x80	; 128
    2f6a:	bf e3       	ldi	r27, 0x3F	; 63
    2f6c:	89 8f       	std	Y+25, r24	; 0x19
    2f6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2f70:	ab 8f       	std	Y+27, r26	; 0x1b
    2f72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f74:	69 8d       	ldd	r22, Y+25	; 0x19
    2f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	4a ef       	ldi	r20, 0xFA	; 250
    2f82:	54 e4       	ldi	r21, 0x44	; 68
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	8d 8b       	std	Y+21, r24	; 0x15
    2f8e:	9e 8b       	std	Y+22, r25	; 0x16
    2f90:	af 8b       	std	Y+23, r26	; 0x17
    2f92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f94:	6d 89       	ldd	r22, Y+21	; 0x15
    2f96:	7e 89       	ldd	r23, Y+22	; 0x16
    2f98:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e8       	ldi	r20, 0x80	; 128
    2fa2:	5f e3       	ldi	r21, 0x3F	; 63
    2fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa8:	88 23       	and	r24, r24
    2faa:	2c f4       	brge	.+10     	; 0x2fb6 <LCD_8_BitvidInit+0x260>
		__ticks = 1;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9c 8b       	std	Y+20, r25	; 0x14
    2fb2:	8b 8b       	std	Y+19, r24	; 0x13
    2fb4:	3f c0       	rjmp	.+126    	; 0x3034 <LCD_8_BitvidInit+0x2de>
	else if (__tmp > 65535)
    2fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fba:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	3f ef       	ldi	r19, 0xFF	; 255
    2fc2:	4f e7       	ldi	r20, 0x7F	; 127
    2fc4:	57 e4       	ldi	r21, 0x47	; 71
    2fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	4c f5       	brge	.+82     	; 0x3020 <LCD_8_BitvidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fce:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	51 e4       	ldi	r21, 0x41	; 65
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9c 8b       	std	Y+20, r25	; 0x14
    2ff4:	8b 8b       	std	Y+19, r24	; 0x13
    2ff6:	0f c0       	rjmp	.+30     	; 0x3016 <LCD_8_BitvidInit+0x2c0>
    2ff8:	88 ec       	ldi	r24, 0xC8	; 200
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9a 8b       	std	Y+18, r25	; 0x12
    2ffe:	89 8b       	std	Y+17, r24	; 0x11
    3000:	89 89       	ldd	r24, Y+17	; 0x11
    3002:	9a 89       	ldd	r25, Y+18	; 0x12
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <LCD_8_BitvidInit+0x2ae>
    3008:	9a 8b       	std	Y+18, r25	; 0x12
    300a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300c:	8b 89       	ldd	r24, Y+19	; 0x13
    300e:	9c 89       	ldd	r25, Y+20	; 0x14
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	9c 8b       	std	Y+20, r25	; 0x14
    3014:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	9c 89       	ldd	r25, Y+20	; 0x14
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	69 f7       	brne	.-38     	; 0x2ff8 <LCD_8_BitvidInit+0x2a2>
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <LCD_8_BitvidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3020:	6d 89       	ldd	r22, Y+21	; 0x15
    3022:	7e 89       	ldd	r23, Y+22	; 0x16
    3024:	8f 89       	ldd	r24, Y+23	; 0x17
    3026:	98 8d       	ldd	r25, Y+24	; 0x18
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9c 8b       	std	Y+20, r25	; 0x14
    3032:	8b 8b       	std	Y+19, r24	; 0x13
    3034:	8b 89       	ldd	r24, Y+19	; 0x13
    3036:	9c 89       	ldd	r25, Y+20	; 0x14
    3038:	98 8b       	std	Y+16, r25	; 0x10
    303a:	8f 87       	std	Y+15, r24	; 0x0f
    303c:	8f 85       	ldd	r24, Y+15	; 0x0f
    303e:	98 89       	ldd	r25, Y+16	; 0x10
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	f1 f7       	brne	.-4      	; 0x3040 <LCD_8_BitvidInit+0x2ea>
    3044:	98 8b       	std	Y+16, r25	; 0x10
    3046:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_CLEAR_CMD);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	0e 94 a5 18 	call	0x314a	; 0x314a <LCD_8_BitvidsendCommand>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	a0 e0       	ldi	r26, 0x00	; 0
    3054:	b0 e4       	ldi	r27, 0x40	; 64
    3056:	8b 87       	std	Y+11, r24	; 0x0b
    3058:	9c 87       	std	Y+12, r25	; 0x0c
    305a:	ad 87       	std	Y+13, r26	; 0x0d
    305c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3060:	7c 85       	ldd	r23, Y+12	; 0x0c
    3062:	8d 85       	ldd	r24, Y+13	; 0x0d
    3064:	9e 85       	ldd	r25, Y+14	; 0x0e
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	4a ef       	ldi	r20, 0xFA	; 250
    306c:	54 e4       	ldi	r21, 0x44	; 68
    306e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	8f 83       	std	Y+7, r24	; 0x07
    3078:	98 87       	std	Y+8, r25	; 0x08
    307a:	a9 87       	std	Y+9, r26	; 0x09
    307c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e8       	ldi	r20, 0x80	; 128
    308c:	5f e3       	ldi	r21, 0x3F	; 63
    308e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3092:	88 23       	and	r24, r24
    3094:	2c f4       	brge	.+10     	; 0x30a0 <LCD_8_BitvidInit+0x34a>
		__ticks = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	3f c0       	rjmp	.+126    	; 0x311e <LCD_8_BitvidInit+0x3c8>
	else if (__tmp > 65535)
    30a0:	6f 81       	ldd	r22, Y+7	; 0x07
    30a2:	78 85       	ldd	r23, Y+8	; 0x08
    30a4:	89 85       	ldd	r24, Y+9	; 0x09
    30a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	57 e4       	ldi	r21, 0x47	; 71
    30b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b4:	18 16       	cp	r1, r24
    30b6:	4c f5       	brge	.+82     	; 0x310a <LCD_8_BitvidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    30bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30be:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e2       	ldi	r20, 0x20	; 32
    30c6:	51 e4       	ldi	r21, 0x41	; 65
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	0f c0       	rjmp	.+30     	; 0x3100 <LCD_8_BitvidInit+0x3aa>
    30e2:	88 ec       	ldi	r24, 0xC8	; 200
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	8b 83       	std	Y+3, r24	; 0x03
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	9c 81       	ldd	r25, Y+4	; 0x04
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <LCD_8_BitvidInit+0x398>
    30f2:	9c 83       	std	Y+4, r25	; 0x04
    30f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	9e 83       	std	Y+6, r25	; 0x06
    30fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3100:	8d 81       	ldd	r24, Y+5	; 0x05
    3102:	9e 81       	ldd	r25, Y+6	; 0x06
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	69 f7       	brne	.-38     	; 0x30e2 <LCD_8_BitvidInit+0x38c>
    3108:	14 c0       	rjmp	.+40     	; 0x3132 <LCD_8_BitvidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310a:	6f 81       	ldd	r22, Y+7	; 0x07
    310c:	78 85       	ldd	r23, Y+8	; 0x08
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	9e 81       	ldd	r25, Y+6	; 0x06
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <LCD_8_BitvidInit+0x3d4>
    312e:	9a 83       	std	Y+2, r25	; 0x02
    3130:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_8_BitvidsendCommand(LCD_8_BIT_ENTRY_MODE_SET_CMD);
    3132:	86 e0       	ldi	r24, 0x06	; 6
    3134:	0e 94 a5 18 	call	0x314a	; 0x314a <LCD_8_BitvidsendCommand>

}
    3138:	e8 96       	adiw	r28, 0x38	; 56
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <LCD_8_BitvidsendCommand>:
void LCD_8_BitvidsendCommand(u8 Copy_u8command)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	6d 97       	sbiw	r28, 0x1d	; 29
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	62 e0       	ldi	r22, 0x02	; 2
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    316a:	83 e0       	ldi	r24, 0x03	; 3
    316c:	61 e0       	ldi	r22, 0x01	; 1
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8command);
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3178:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    317c:	83 e0       	ldi	r24, 0x03	; 3
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	41 e0       	ldi	r20, 0x01	; 1
    3182:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 e0       	ldi	r26, 0x00	; 0
    318c:	b0 e4       	ldi	r27, 0x40	; 64
    318e:	89 8f       	std	Y+25, r24	; 0x19
    3190:	9a 8f       	std	Y+26, r25	; 0x1a
    3192:	ab 8f       	std	Y+27, r26	; 0x1b
    3194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3196:	69 8d       	ldd	r22, Y+25	; 0x19
    3198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    319a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    319c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	4a ef       	ldi	r20, 0xFA	; 250
    31a4:	54 e4       	ldi	r21, 0x44	; 68
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	8d 8b       	std	Y+21, r24	; 0x15
    31b0:	9e 8b       	std	Y+22, r25	; 0x16
    31b2:	af 8b       	std	Y+23, r26	; 0x17
    31b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31b6:	6d 89       	ldd	r22, Y+21	; 0x15
    31b8:	7e 89       	ldd	r23, Y+22	; 0x16
    31ba:	8f 89       	ldd	r24, Y+23	; 0x17
    31bc:	98 8d       	ldd	r25, Y+24	; 0x18
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e8       	ldi	r20, 0x80	; 128
    31c4:	5f e3       	ldi	r21, 0x3F	; 63
    31c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ca:	88 23       	and	r24, r24
    31cc:	2c f4       	brge	.+10     	; 0x31d8 <LCD_8_BitvidsendCommand+0x8e>
		__ticks = 1;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	9c 8b       	std	Y+20, r25	; 0x14
    31d4:	8b 8b       	std	Y+19, r24	; 0x13
    31d6:	3f c0       	rjmp	.+126    	; 0x3256 <LCD_8_BitvidsendCommand+0x10c>
	else if (__tmp > 65535)
    31d8:	6d 89       	ldd	r22, Y+21	; 0x15
    31da:	7e 89       	ldd	r23, Y+22	; 0x16
    31dc:	8f 89       	ldd	r24, Y+23	; 0x17
    31de:	98 8d       	ldd	r25, Y+24	; 0x18
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	3f ef       	ldi	r19, 0xFF	; 255
    31e4:	4f e7       	ldi	r20, 0x7F	; 127
    31e6:	57 e4       	ldi	r21, 0x47	; 71
    31e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ec:	18 16       	cp	r1, r24
    31ee:	4c f5       	brge	.+82     	; 0x3242 <LCD_8_BitvidsendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f0:	69 8d       	ldd	r22, Y+25	; 0x19
    31f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e2       	ldi	r20, 0x20	; 32
    31fe:	51 e4       	ldi	r21, 0x41	; 65
    3200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	9c 8b       	std	Y+20, r25	; 0x14
    3216:	8b 8b       	std	Y+19, r24	; 0x13
    3218:	0f c0       	rjmp	.+30     	; 0x3238 <LCD_8_BitvidsendCommand+0xee>
    321a:	88 ec       	ldi	r24, 0xC8	; 200
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	9a 8b       	std	Y+18, r25	; 0x12
    3220:	89 8b       	std	Y+17, r24	; 0x11
    3222:	89 89       	ldd	r24, Y+17	; 0x11
    3224:	9a 89       	ldd	r25, Y+18	; 0x12
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <LCD_8_BitvidsendCommand+0xdc>
    322a:	9a 8b       	std	Y+18, r25	; 0x12
    322c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322e:	8b 89       	ldd	r24, Y+19	; 0x13
    3230:	9c 89       	ldd	r25, Y+20	; 0x14
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3238:	8b 89       	ldd	r24, Y+19	; 0x13
    323a:	9c 89       	ldd	r25, Y+20	; 0x14
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	69 f7       	brne	.-38     	; 0x321a <LCD_8_BitvidsendCommand+0xd0>
    3240:	14 c0       	rjmp	.+40     	; 0x326a <LCD_8_BitvidsendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3242:	6d 89       	ldd	r22, Y+21	; 0x15
    3244:	7e 89       	ldd	r23, Y+22	; 0x16
    3246:	8f 89       	ldd	r24, Y+23	; 0x17
    3248:	98 8d       	ldd	r25, Y+24	; 0x18
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	8b 89       	ldd	r24, Y+19	; 0x13
    3258:	9c 89       	ldd	r25, Y+20	; 0x14
    325a:	98 8b       	std	Y+16, r25	; 0x10
    325c:	8f 87       	std	Y+15, r24	; 0x0f
    325e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3260:	98 89       	ldd	r25, Y+16	; 0x10
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <LCD_8_BitvidsendCommand+0x118>
    3266:	98 8b       	std	Y+16, r25	; 0x10
    3268:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    326a:	83 e0       	ldi	r24, 0x03	; 3
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a0 e0       	ldi	r26, 0x00	; 0
    327a:	b0 e4       	ldi	r27, 0x40	; 64
    327c:	8b 87       	std	Y+11, r24	; 0x0b
    327e:	9c 87       	std	Y+12, r25	; 0x0c
    3280:	ad 87       	std	Y+13, r26	; 0x0d
    3282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3284:	6b 85       	ldd	r22, Y+11	; 0x0b
    3286:	7c 85       	ldd	r23, Y+12	; 0x0c
    3288:	8d 85       	ldd	r24, Y+13	; 0x0d
    328a:	9e 85       	ldd	r25, Y+14	; 0x0e
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a ef       	ldi	r20, 0xFA	; 250
    3292:	54 e4       	ldi	r21, 0x44	; 68
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8f 83       	std	Y+7, r24	; 0x07
    329e:	98 87       	std	Y+8, r25	; 0x08
    32a0:	a9 87       	std	Y+9, r26	; 0x09
    32a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a4:	6f 81       	ldd	r22, Y+7	; 0x07
    32a6:	78 85       	ldd	r23, Y+8	; 0x08
    32a8:	89 85       	ldd	r24, Y+9	; 0x09
    32aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <LCD_8_BitvidsendCommand+0x17c>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	3f c0       	rjmp	.+126    	; 0x3344 <LCD_8_BitvidsendCommand+0x1fa>
	else if (__tmp > 65535)
    32c6:	6f 81       	ldd	r22, Y+7	; 0x07
    32c8:	78 85       	ldd	r23, Y+8	; 0x08
    32ca:	89 85       	ldd	r24, Y+9	; 0x09
    32cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	3f ef       	ldi	r19, 0xFF	; 255
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	57 e4       	ldi	r21, 0x47	; 71
    32d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	4c f5       	brge	.+82     	; 0x3330 <LCD_8_BitvidsendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e2       	ldi	r20, 0x20	; 32
    32ec:	51 e4       	ldi	r21, 0x41	; 65
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9e 83       	std	Y+6, r25	; 0x06
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	0f c0       	rjmp	.+30     	; 0x3326 <LCD_8_BitvidsendCommand+0x1dc>
    3308:	88 ec       	ldi	r24, 0xC8	; 200
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9c 83       	std	Y+4, r25	; 0x04
    330e:	8b 83       	std	Y+3, r24	; 0x03
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	9c 81       	ldd	r25, Y+4	; 0x04
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <LCD_8_BitvidsendCommand+0x1ca>
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	9e 81       	ldd	r25, Y+6	; 0x06
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	69 f7       	brne	.-38     	; 0x3308 <LCD_8_BitvidsendCommand+0x1be>
    332e:	14 c0       	rjmp	.+40     	; 0x3358 <LCD_8_BitvidsendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3330:	6f 81       	ldd	r22, Y+7	; 0x07
    3332:	78 85       	ldd	r23, Y+8	; 0x08
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9e 83       	std	Y+6, r25	; 0x06
    3342:	8d 83       	std	Y+5, r24	; 0x05
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <LCD_8_BitvidsendCommand+0x206>
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3358:	6d 96       	adiw	r28, 0x1d	; 29
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_8_BitvidwriteCharacter>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	6d 97       	sbiw	r28, 0x1d	; 29
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3380:	83 e0       	ldi	r24, 0x03	; 3
    3382:	62 e0       	ldi	r22, 0x02	; 2
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    338a:	83 e0       	ldi	r24, 0x03	; 3
    338c:	61 e0       	ldi	r22, 0x01	; 1
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3398:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b0 e4       	ldi	r27, 0x40	; 64
    33ae:	89 8f       	std	Y+25, r24	; 0x19
    33b0:	9a 8f       	std	Y+26, r25	; 0x1a
    33b2:	ab 8f       	std	Y+27, r26	; 0x1b
    33b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b6:	69 8d       	ldd	r22, Y+25	; 0x19
    33b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	4a ef       	ldi	r20, 0xFA	; 250
    33c4:	54 e4       	ldi	r21, 0x44	; 68
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8d 8b       	std	Y+21, r24	; 0x15
    33d0:	9e 8b       	std	Y+22, r25	; 0x16
    33d2:	af 8b       	std	Y+23, r26	; 0x17
    33d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33d6:	6d 89       	ldd	r22, Y+21	; 0x15
    33d8:	7e 89       	ldd	r23, Y+22	; 0x16
    33da:	8f 89       	ldd	r24, Y+23	; 0x17
    33dc:	98 8d       	ldd	r25, Y+24	; 0x18
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ea:	88 23       	and	r24, r24
    33ec:	2c f4       	brge	.+10     	; 0x33f8 <LCD_8_BitvidwriteCharacter+0x8e>
		__ticks = 1;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9c 8b       	std	Y+20, r25	; 0x14
    33f4:	8b 8b       	std	Y+19, r24	; 0x13
    33f6:	3f c0       	rjmp	.+126    	; 0x3476 <LCD_8_BitvidwriteCharacter+0x10c>
	else if (__tmp > 65535)
    33f8:	6d 89       	ldd	r22, Y+21	; 0x15
    33fa:	7e 89       	ldd	r23, Y+22	; 0x16
    33fc:	8f 89       	ldd	r24, Y+23	; 0x17
    33fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340c:	18 16       	cp	r1, r24
    340e:	4c f5       	brge	.+82     	; 0x3462 <LCD_8_BitvidwriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3410:	69 8d       	ldd	r22, Y+25	; 0x19
    3412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e2       	ldi	r20, 0x20	; 32
    341e:	51 e4       	ldi	r21, 0x41	; 65
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	bc 01       	movw	r22, r24
    342a:	cd 01       	movw	r24, r26
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9c 8b       	std	Y+20, r25	; 0x14
    3436:	8b 8b       	std	Y+19, r24	; 0x13
    3438:	0f c0       	rjmp	.+30     	; 0x3458 <LCD_8_BitvidwriteCharacter+0xee>
    343a:	88 ec       	ldi	r24, 0xC8	; 200
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9a 8b       	std	Y+18, r25	; 0x12
    3440:	89 8b       	std	Y+17, r24	; 0x11
    3442:	89 89       	ldd	r24, Y+17	; 0x11
    3444:	9a 89       	ldd	r25, Y+18	; 0x12
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <LCD_8_BitvidwriteCharacter+0xdc>
    344a:	9a 8b       	std	Y+18, r25	; 0x12
    344c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344e:	8b 89       	ldd	r24, Y+19	; 0x13
    3450:	9c 89       	ldd	r25, Y+20	; 0x14
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	9c 8b       	std	Y+20, r25	; 0x14
    3456:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3458:	8b 89       	ldd	r24, Y+19	; 0x13
    345a:	9c 89       	ldd	r25, Y+20	; 0x14
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	69 f7       	brne	.-38     	; 0x343a <LCD_8_BitvidwriteCharacter+0xd0>
    3460:	14 c0       	rjmp	.+40     	; 0x348a <LCD_8_BitvidwriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3462:	6d 89       	ldd	r22, Y+21	; 0x15
    3464:	7e 89       	ldd	r23, Y+22	; 0x16
    3466:	8f 89       	ldd	r24, Y+23	; 0x17
    3468:	98 8d       	ldd	r25, Y+24	; 0x18
    346a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	9c 8b       	std	Y+20, r25	; 0x14
    3474:	8b 8b       	std	Y+19, r24	; 0x13
    3476:	8b 89       	ldd	r24, Y+19	; 0x13
    3478:	9c 89       	ldd	r25, Y+20	; 0x14
    347a:	98 8b       	std	Y+16, r25	; 0x10
    347c:	8f 87       	std	Y+15, r24	; 0x0f
    347e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3480:	98 89       	ldd	r25, Y+16	; 0x10
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <LCD_8_BitvidwriteCharacter+0x118>
    3486:	98 8b       	std	Y+16, r25	; 0x10
    3488:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	40 e0       	ldi	r20, 0x00	; 0
    3490:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	a0 e0       	ldi	r26, 0x00	; 0
    349a:	b0 e4       	ldi	r27, 0x40	; 64
    349c:	8b 87       	std	Y+11, r24	; 0x0b
    349e:	9c 87       	std	Y+12, r25	; 0x0c
    34a0:	ad 87       	std	Y+13, r26	; 0x0d
    34a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	4a ef       	ldi	r20, 0xFA	; 250
    34b2:	54 e4       	ldi	r21, 0x44	; 68
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	8f 83       	std	Y+7, r24	; 0x07
    34be:	98 87       	std	Y+8, r25	; 0x08
    34c0:	a9 87       	std	Y+9, r26	; 0x09
    34c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34c4:	6f 81       	ldd	r22, Y+7	; 0x07
    34c6:	78 85       	ldd	r23, Y+8	; 0x08
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e8       	ldi	r20, 0x80	; 128
    34d2:	5f e3       	ldi	r21, 0x3F	; 63
    34d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d8:	88 23       	and	r24, r24
    34da:	2c f4       	brge	.+10     	; 0x34e6 <LCD_8_BitvidwriteCharacter+0x17c>
		__ticks = 1;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	9e 83       	std	Y+6, r25	; 0x06
    34e2:	8d 83       	std	Y+5, r24	; 0x05
    34e4:	3f c0       	rjmp	.+126    	; 0x3564 <LCD_8_BitvidwriteCharacter+0x1fa>
	else if (__tmp > 65535)
    34e6:	6f 81       	ldd	r22, Y+7	; 0x07
    34e8:	78 85       	ldd	r23, Y+8	; 0x08
    34ea:	89 85       	ldd	r24, Y+9	; 0x09
    34ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	3f ef       	ldi	r19, 0xFF	; 255
    34f2:	4f e7       	ldi	r20, 0x7F	; 127
    34f4:	57 e4       	ldi	r21, 0x47	; 71
    34f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34fa:	18 16       	cp	r1, r24
    34fc:	4c f5       	brge	.+82     	; 0x3550 <LCD_8_BitvidwriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3500:	7c 85       	ldd	r23, Y+12	; 0x0c
    3502:	8d 85       	ldd	r24, Y+13	; 0x0d
    3504:	9e 85       	ldd	r25, Y+14	; 0x0e
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e2       	ldi	r20, 0x20	; 32
    350c:	51 e4       	ldi	r21, 0x41	; 65
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	9e 83       	std	Y+6, r25	; 0x06
    3524:	8d 83       	std	Y+5, r24	; 0x05
    3526:	0f c0       	rjmp	.+30     	; 0x3546 <LCD_8_BitvidwriteCharacter+0x1dc>
    3528:	88 ec       	ldi	r24, 0xC8	; 200
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	9c 83       	std	Y+4, r25	; 0x04
    352e:	8b 83       	std	Y+3, r24	; 0x03
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	9c 81       	ldd	r25, Y+4	; 0x04
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <LCD_8_BitvidwriteCharacter+0x1ca>
    3538:	9c 83       	std	Y+4, r25	; 0x04
    353a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	01 97       	sbiw	r24, 0x01	; 1
    3542:	9e 83       	std	Y+6, r25	; 0x06
    3544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3546:	8d 81       	ldd	r24, Y+5	; 0x05
    3548:	9e 81       	ldd	r25, Y+6	; 0x06
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	69 f7       	brne	.-38     	; 0x3528 <LCD_8_BitvidwriteCharacter+0x1be>
    354e:	14 c0       	rjmp	.+40     	; 0x3578 <LCD_8_BitvidwriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3550:	6f 81       	ldd	r22, Y+7	; 0x07
    3552:	78 85       	ldd	r23, Y+8	; 0x08
    3554:	89 85       	ldd	r24, Y+9	; 0x09
    3556:	9a 85       	ldd	r25, Y+10	; 0x0a
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	9a 83       	std	Y+2, r25	; 0x02
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	9a 81       	ldd	r25, Y+2	; 0x02
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	f1 f7       	brne	.-4      	; 0x3570 <LCD_8_BitvidwriteCharacter+0x206>
    3574:	9a 83       	std	Y+2, r25	; 0x02
    3576:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3578:	6d 96       	adiw	r28, 0x1d	; 29
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	08 95       	ret

0000358a <LCD_8_BitvidreadCharacter>:

void LCD_8_BitvidreadCharacter(u8 Copy_u8character)
{
    358a:	df 93       	push	r29
    358c:	cf 93       	push	r28
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	6d 97       	sbiw	r28, 0x1d	; 29
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    35a0:	83 e0       	ldi	r24, 0x03	; 3
    35a2:	62 e0       	ldi	r22, 0x02	; 2
    35a4:	41 e0       	ldi	r20, 0x01	; 1
    35a6:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, HIGH);
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	41 e0       	ldi	r20, 0x01	; 1
    35b0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    35b4:	82 e0       	ldi	r24, 0x02	; 2
    35b6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    35b8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	41 e0       	ldi	r20, 0x01	; 1
    35c2:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a0 e0       	ldi	r26, 0x00	; 0
    35cc:	b0 e4       	ldi	r27, 0x40	; 64
    35ce:	89 8f       	std	Y+25, r24	; 0x19
    35d0:	9a 8f       	std	Y+26, r25	; 0x1a
    35d2:	ab 8f       	std	Y+27, r26	; 0x1b
    35d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d6:	69 8d       	ldd	r22, Y+25	; 0x19
    35d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	4a ef       	ldi	r20, 0xFA	; 250
    35e4:	54 e4       	ldi	r21, 0x44	; 68
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	8d 8b       	std	Y+21, r24	; 0x15
    35f0:	9e 8b       	std	Y+22, r25	; 0x16
    35f2:	af 8b       	std	Y+23, r26	; 0x17
    35f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35f6:	6d 89       	ldd	r22, Y+21	; 0x15
    35f8:	7e 89       	ldd	r23, Y+22	; 0x16
    35fa:	8f 89       	ldd	r24, Y+23	; 0x17
    35fc:	98 8d       	ldd	r25, Y+24	; 0x18
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e8       	ldi	r20, 0x80	; 128
    3604:	5f e3       	ldi	r21, 0x3F	; 63
    3606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360a:	88 23       	and	r24, r24
    360c:	2c f4       	brge	.+10     	; 0x3618 <LCD_8_BitvidreadCharacter+0x8e>
		__ticks = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	8b 8b       	std	Y+19, r24	; 0x13
    3616:	3f c0       	rjmp	.+126    	; 0x3696 <LCD_8_BitvidreadCharacter+0x10c>
	else if (__tmp > 65535)
    3618:	6d 89       	ldd	r22, Y+21	; 0x15
    361a:	7e 89       	ldd	r23, Y+22	; 0x16
    361c:	8f 89       	ldd	r24, Y+23	; 0x17
    361e:	98 8d       	ldd	r25, Y+24	; 0x18
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	3f ef       	ldi	r19, 0xFF	; 255
    3624:	4f e7       	ldi	r20, 0x7F	; 127
    3626:	57 e4       	ldi	r21, 0x47	; 71
    3628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    362c:	18 16       	cp	r1, r24
    362e:	4c f5       	brge	.+82     	; 0x3682 <LCD_8_BitvidreadCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3630:	69 8d       	ldd	r22, Y+25	; 0x19
    3632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e2       	ldi	r20, 0x20	; 32
    363e:	51 e4       	ldi	r21, 0x41	; 65
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9c 8b       	std	Y+20, r25	; 0x14
    3656:	8b 8b       	std	Y+19, r24	; 0x13
    3658:	0f c0       	rjmp	.+30     	; 0x3678 <LCD_8_BitvidreadCharacter+0xee>
    365a:	88 ec       	ldi	r24, 0xC8	; 200
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9a 8b       	std	Y+18, r25	; 0x12
    3660:	89 8b       	std	Y+17, r24	; 0x11
    3662:	89 89       	ldd	r24, Y+17	; 0x11
    3664:	9a 89       	ldd	r25, Y+18	; 0x12
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <LCD_8_BitvidreadCharacter+0xdc>
    366a:	9a 8b       	std	Y+18, r25	; 0x12
    366c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366e:	8b 89       	ldd	r24, Y+19	; 0x13
    3670:	9c 89       	ldd	r25, Y+20	; 0x14
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	9c 8b       	std	Y+20, r25	; 0x14
    3676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3678:	8b 89       	ldd	r24, Y+19	; 0x13
    367a:	9c 89       	ldd	r25, Y+20	; 0x14
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	69 f7       	brne	.-38     	; 0x365a <LCD_8_BitvidreadCharacter+0xd0>
    3680:	14 c0       	rjmp	.+40     	; 0x36aa <LCD_8_BitvidreadCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3682:	6d 89       	ldd	r22, Y+21	; 0x15
    3684:	7e 89       	ldd	r23, Y+22	; 0x16
    3686:	8f 89       	ldd	r24, Y+23	; 0x17
    3688:	98 8d       	ldd	r25, Y+24	; 0x18
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9c 8b       	std	Y+20, r25	; 0x14
    3694:	8b 8b       	std	Y+19, r24	; 0x13
    3696:	8b 89       	ldd	r24, Y+19	; 0x13
    3698:	9c 89       	ldd	r25, Y+20	; 0x14
    369a:	98 8b       	std	Y+16, r25	; 0x10
    369c:	8f 87       	std	Y+15, r24	; 0x0f
    369e:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a0:	98 89       	ldd	r25, Y+16	; 0x10
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <LCD_8_BitvidreadCharacter+0x118>
    36a6:	98 8b       	std	Y+16, r25	; 0x10
    36a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a0 e0       	ldi	r26, 0x00	; 0
    36ba:	b0 e4       	ldi	r27, 0x40	; 64
    36bc:	8b 87       	std	Y+11, r24	; 0x0b
    36be:	9c 87       	std	Y+12, r25	; 0x0c
    36c0:	ad 87       	std	Y+13, r26	; 0x0d
    36c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a ef       	ldi	r20, 0xFA	; 250
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	8f 83       	std	Y+7, r24	; 0x07
    36de:	98 87       	std	Y+8, r25	; 0x08
    36e0:	a9 87       	std	Y+9, r26	; 0x09
    36e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <LCD_8_BitvidreadCharacter+0x17c>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
    3704:	3f c0       	rjmp	.+126    	; 0x3784 <LCD_8_BitvidreadCharacter+0x1fa>
	else if (__tmp > 65535)
    3706:	6f 81       	ldd	r22, Y+7	; 0x07
    3708:	78 85       	ldd	r23, Y+8	; 0x08
    370a:	89 85       	ldd	r24, Y+9	; 0x09
    370c:	9a 85       	ldd	r25, Y+10	; 0x0a
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	4c f5       	brge	.+82     	; 0x3770 <LCD_8_BitvidreadCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3720:	7c 85       	ldd	r23, Y+12	; 0x0c
    3722:	8d 85       	ldd	r24, Y+13	; 0x0d
    3724:	9e 85       	ldd	r25, Y+14	; 0x0e
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e2       	ldi	r20, 0x20	; 32
    372c:	51 e4       	ldi	r21, 0x41	; 65
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	0f c0       	rjmp	.+30     	; 0x3766 <LCD_8_BitvidreadCharacter+0x1dc>
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_8_BitvidreadCharacter+0x1ca>
    3758:	9c 83       	std	Y+4, r25	; 0x04
    375a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	9e 83       	std	Y+6, r25	; 0x06
    3764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	9e 81       	ldd	r25, Y+6	; 0x06
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f7       	brne	.-38     	; 0x3748 <LCD_8_BitvidreadCharacter+0x1be>
    376e:	14 c0       	rjmp	.+40     	; 0x3798 <LCD_8_BitvidreadCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	6f 81       	ldd	r22, Y+7	; 0x07
    3772:	78 85       	ldd	r23, Y+8	; 0x08
    3774:	89 85       	ldd	r24, Y+9	; 0x09
    3776:	9a 85       	ldd	r25, Y+10	; 0x0a
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
    3784:	8d 81       	ldd	r24, Y+5	; 0x05
    3786:	9e 81       	ldd	r25, Y+6	; 0x06
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_8_BitvidreadCharacter+0x206>
    3794:	9a 83       	std	Y+2, r25	; 0x02
    3796:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3798:	6d 96       	adiw	r28, 0x1d	; 29
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <LCD_8_BitvidwriteString>:

void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	00 d0       	rcall	.+0      	; 0x37b0 <LCD_8_BitvidwriteString+0x6>
    37b0:	0f 92       	push	r0
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	9b 83       	std	Y+3, r25	; 0x03
    37b8:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    37ba:	8a 81       	ldd	r24, Y+2	; 0x02
    37bc:	9b 81       	ldd	r25, Y+3	; 0x03
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	d9 f0       	breq	.+54     	; 0x37f8 <LCD_8_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    37c2:	19 82       	std	Y+1, r1	; 0x01
    37c4:	0e c0       	rjmp	.+28     	; 0x37e2 <LCD_8_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	8a 81       	ldd	r24, Y+2	; 0x02
    37ce:	9b 81       	ldd	r25, Y+3	; 0x03
    37d0:	fc 01       	movw	r30, r24
    37d2:	e2 0f       	add	r30, r18
    37d4:	f3 1f       	adc	r31, r19
    37d6:	80 81       	ld	r24, Z
    37d8:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_8_BitvidwriteCharacter>
			Local_u8Counter++;
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	8f 5f       	subi	r24, 0xFF	; 255
    37e0:	89 83       	std	Y+1, r24	; 0x01
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	9b 81       	ldd	r25, Y+3	; 0x03
    37ec:	fc 01       	movw	r30, r24
    37ee:	e2 0f       	add	r30, r18
    37f0:	f3 1f       	adc	r31, r19
    37f2:	80 81       	ld	r24, Z
    37f4:	88 23       	and	r24, r24
    37f6:	39 f7       	brne	.-50     	; 0x37c6 <LCD_8_BitvidwriteString+0x1c>
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <LCD_4_BitvidwriteString>:

void LCD_4_BitvidwriteString(const char* Copy_p2cString)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	00 d0       	rcall	.+0      	; 0x380a <LCD_4_BitvidwriteString+0x6>
    380a:	0f 92       	push	r0
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	9b 83       	std	Y+3, r25	; 0x03
    3812:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	d9 f0       	breq	.+54     	; 0x3852 <LCD_4_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    381c:	19 82       	std	Y+1, r1	; 0x01
    381e:	0e c0       	rjmp	.+28     	; 0x383c <LCD_4_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_4_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	fc 01       	movw	r30, r24
    382c:	e2 0f       	add	r30, r18
    382e:	f3 1f       	adc	r31, r19
    3830:	80 81       	ld	r24, Z
    3832:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_4_BitvidwriteCharacter>
			Local_u8Counter++;
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	8f 5f       	subi	r24, 0xFF	; 255
    383a:	89 83       	std	Y+1, r24	; 0x01
void LCD_4_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	28 2f       	mov	r18, r24
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	9b 81       	ldd	r25, Y+3	; 0x03
    3846:	fc 01       	movw	r30, r24
    3848:	e2 0f       	add	r30, r18
    384a:	f3 1f       	adc	r31, r19
    384c:	80 81       	ld	r24, Z
    384e:	88 23       	and	r24, r24
    3850:	39 f7       	brne	.-50     	; 0x3820 <LCD_4_BitvidwriteString+0x1c>
		{
			LCD_4_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <LCD_8_BitvidGoToXY>:

void LCD_8_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	00 d0       	rcall	.+0      	; 0x3864 <LCD_8_BitvidGoToXY+0x6>
    3864:	0f 92       	push	r0
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	8a 83       	std	Y+2, r24	; 0x02
    386c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    386e:	8a 81       	ldd	r24, Y+2	; 0x02
    3870:	88 23       	and	r24, r24
    3872:	19 f4       	brne	.+6      	; 0x387a <LCD_8_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    3874:	8b 81       	ldd	r24, Y+3	; 0x03
    3876:	89 83       	std	Y+1, r24	; 0x01
    3878:	06 c0       	rjmp	.+12     	; 0x3886 <LCD_8_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	81 30       	cpi	r24, 0x01	; 1
    387e:	19 f4       	brne	.+6      	; 0x3886 <LCD_8_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	80 5c       	subi	r24, 0xC0	; 192
    3884:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_8_BitvidsendCommand(Local_u8Address+128);
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	80 58       	subi	r24, 0x80	; 128
    388a:	0e 94 a5 18 	call	0x314a	; 0x314a <LCD_8_BitvidsendCommand>
}
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <LCD_4_BitvidGoToXY>:

void LCD_4_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	00 d0       	rcall	.+0      	; 0x38a0 <LCD_4_BitvidGoToXY+0x6>
    38a0:	0f 92       	push	r0
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	8a 83       	std	Y+2, r24	; 0x02
    38a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    38aa:	8a 81       	ldd	r24, Y+2	; 0x02
    38ac:	88 23       	and	r24, r24
    38ae:	19 f4       	brne	.+6      	; 0x38b6 <LCD_4_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	06 c0       	rjmp	.+12     	; 0x38c2 <LCD_4_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	81 30       	cpi	r24, 0x01	; 1
    38ba:	19 f4       	brne	.+6      	; 0x38c2 <LCD_4_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	80 5c       	subi	r24, 0xC0	; 192
    38c0:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_4_BitvidsendCommand(Local_u8Address+128);
    38c2:	89 81       	ldd	r24, Y+1	; 0x01
    38c4:	80 58       	subi	r24, 0x80	; 128
    38c6:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
}
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	cf 91       	pop	r28
    38d2:	df 91       	pop	r29
    38d4:	08 95       	ret

000038d6 <LCD_8_BitvidwriteSpecialCharacter>:

void LCD_8_BitvidwriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    38d6:	df 93       	push	r29
    38d8:	cf 93       	push	r28
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	27 97       	sbiw	r28, 0x07	; 7
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	9c 83       	std	Y+4, r25	; 0x04
    38ec:	8b 83       	std	Y+3, r24	; 0x03
    38ee:	6d 83       	std	Y+5, r22	; 0x05
    38f0:	4e 83       	std	Y+6, r20	; 0x06
    38f2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0 , Local_u8Iterator;
    38f4:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    38f6:	8d 81       	ldd	r24, Y+5	; 0x05
    38f8:	88 2f       	mov	r24, r24
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	88 0f       	add	r24, r24
    38fe:	99 1f       	adc	r25, r25
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
    390a:	8a 81       	ldd	r24, Y+2	; 0x02
    390c:	80 5c       	subi	r24, 0xC0	; 192
    390e:	0e 94 a5 18 	call	0x314a	; 0x314a <LCD_8_BitvidsendCommand>
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3912:	19 82       	std	Y+1, r1	; 0x01
    3914:	0e c0       	rjmp	.+28     	; 0x3932 <LCD_8_BitvidwriteSpecialCharacter+0x5c>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    3916:	89 81       	ldd	r24, Y+1	; 0x01
    3918:	28 2f       	mov	r18, r24
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	fc 01       	movw	r30, r24
    3922:	e2 0f       	add	r30, r18
    3924:	f3 1f       	adc	r31, r19
    3926:	80 81       	ld	r24, Z
    3928:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_8_BitvidwriteCharacter>
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	8f 5f       	subi	r24, 0xFF	; 255
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	88 30       	cpi	r24, 0x08	; 8
    3936:	78 f3       	brcs	.-34     	; 0x3916 <LCD_8_BitvidwriteSpecialCharacter+0x40>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go Back to DDRam to Display the Pattern*/
	LCD_8_BitvidGoToXY(Copy_u8XPos,Copy_u8YPos);
    3938:	8e 81       	ldd	r24, Y+6	; 0x06
    393a:	6f 81       	ldd	r22, Y+7	; 0x07
    393c:	0e 94 2f 1c 	call	0x385e	; 0x385e <LCD_8_BitvidGoToXY>
	/*Display the Pattern Written in CGRam*/
	LCD_8_BitvidwriteCharacter(Copy_u8PatternNumber);
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_8_BitvidwriteCharacter>
}
    3946:	27 96       	adiw	r28, 0x07	; 7
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <LCD_8_BitvidwriteInt>:
void LCD_8_BitvidwriteInt(u32 copy_u8number)
{
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	61 97       	sbiw	r28, 0x11	; 17
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	6e 87       	std	Y+14, r22	; 0x0e
    3972:	7f 87       	std	Y+15, r23	; 0x0f
    3974:	88 8b       	std	Y+16, r24	; 0x10
    3976:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    3978:	8e 85       	ldd	r24, Y+14	; 0x0e
    397a:	9f 85       	ldd	r25, Y+15	; 0x0f
    397c:	a8 89       	ldd	r26, Y+16	; 0x10
    397e:	b9 89       	ldd	r27, Y+17	; 0x11
    3980:	8b 83       	std	Y+3, r24	; 0x03
    3982:	9c 83       	std	Y+4, r25	; 0x04
    3984:	ad 83       	std	Y+5, r26	; 0x05
    3986:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    3988:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    398a:	8b 81       	ldd	r24, Y+3	; 0x03
    398c:	9c 81       	ldd	r25, Y+4	; 0x04
    398e:	ad 81       	ldd	r26, Y+5	; 0x05
    3990:	be 81       	ldd	r27, Y+6	; 0x06
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	a1 05       	cpc	r26, r1
    3996:	b1 05       	cpc	r27, r1
    3998:	89 f5       	brne	.+98     	; 0x39fc <LCD_8_BitvidwriteInt+0xa4>
	{
		LCD_8_BitvidwriteCharacter('0');
    399a:	80 e3       	ldi	r24, 0x30	; 48
    399c:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_8_BitvidwriteCharacter>
    39a0:	4d c0       	rjmp	.+154    	; 0x3a3c <LCD_8_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	08 2f       	mov	r16, r24
    39a6:	10 e0       	ldi	r17, 0x00	; 0
    39a8:	8b 81       	ldd	r24, Y+3	; 0x03
    39aa:	9c 81       	ldd	r25, Y+4	; 0x04
    39ac:	ad 81       	ldd	r26, Y+5	; 0x05
    39ae:	be 81       	ldd	r27, Y+6	; 0x06
    39b0:	2a e0       	ldi	r18, 0x0A	; 10
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e0       	ldi	r20, 0x00	; 0
    39b6:	50 e0       	ldi	r21, 0x00	; 0
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	28 2f       	mov	r18, r24
    39c6:	ce 01       	movw	r24, r28
    39c8:	07 96       	adiw	r24, 0x07	; 7
    39ca:	fc 01       	movw	r30, r24
    39cc:	e0 0f       	add	r30, r16
    39ce:	f1 1f       	adc	r31, r17
    39d0:	20 83       	st	Z, r18
			temp/=10;
    39d2:	8b 81       	ldd	r24, Y+3	; 0x03
    39d4:	9c 81       	ldd	r25, Y+4	; 0x04
    39d6:	ad 81       	ldd	r26, Y+5	; 0x05
    39d8:	be 81       	ldd	r27, Y+6	; 0x06
    39da:	2a e0       	ldi	r18, 0x0A	; 10
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    39ea:	da 01       	movw	r26, r20
    39ec:	c9 01       	movw	r24, r18
    39ee:	8b 83       	std	Y+3, r24	; 0x03
    39f0:	9c 83       	std	Y+4, r25	; 0x04
    39f2:	ad 83       	std	Y+5, r26	; 0x05
    39f4:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	8f 5f       	subi	r24, 0xFF	; 255
    39fa:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_8_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	ad 81       	ldd	r26, Y+5	; 0x05
    3a02:	be 81       	ldd	r27, Y+6	; 0x06
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	a1 05       	cpc	r26, r1
    3a08:	b1 05       	cpc	r27, r1
    3a0a:	59 f6       	brne	.-106    	; 0x39a2 <LCD_8_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0e:	81 50       	subi	r24, 0x01	; 1
    3a10:	89 83       	std	Y+1, r24	; 0x01
    3a12:	11 c0       	rjmp	.+34     	; 0x3a36 <LCD_8_BitvidwriteInt+0xde>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
    3a16:	28 2f       	mov	r18, r24
    3a18:	33 27       	eor	r19, r19
    3a1a:	27 fd       	sbrc	r18, 7
    3a1c:	30 95       	com	r19
    3a1e:	ce 01       	movw	r24, r28
    3a20:	07 96       	adiw	r24, 0x07	; 7
    3a22:	fc 01       	movw	r30, r24
    3a24:	e2 0f       	add	r30, r18
    3a26:	f3 1f       	adc	r31, r19
    3a28:	80 81       	ld	r24, Z
    3a2a:	80 5d       	subi	r24, 0xD0	; 208
    3a2c:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_8_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3a30:	89 81       	ldd	r24, Y+1	; 0x01
    3a32:	81 50       	subi	r24, 0x01	; 1
    3a34:	89 83       	std	Y+1, r24	; 0x01
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	88 23       	and	r24, r24
    3a3a:	64 f7       	brge	.-40     	; 0x3a14 <LCD_8_BitvidwriteInt+0xbc>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    3a3c:	61 96       	adiw	r28, 0x11	; 17
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	1f 91       	pop	r17
    3a4e:	0f 91       	pop	r16
    3a50:	08 95       	ret

00003a52 <LCD_4_BitvidwriteInt>:

void LCD_4_BitvidwriteInt(u32 copy_u8number)
{
    3a52:	0f 93       	push	r16
    3a54:	1f 93       	push	r17
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	61 97       	sbiw	r28, 0x11	; 17
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	6e 87       	std	Y+14, r22	; 0x0e
    3a6c:	7f 87       	std	Y+15, r23	; 0x0f
    3a6e:	88 8b       	std	Y+16, r24	; 0x10
    3a70:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    3a72:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a74:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a76:	a8 89       	ldd	r26, Y+16	; 0x10
    3a78:	b9 89       	ldd	r27, Y+17	; 0x11
    3a7a:	8b 83       	std	Y+3, r24	; 0x03
    3a7c:	9c 83       	std	Y+4, r25	; 0x04
    3a7e:	ad 83       	std	Y+5, r26	; 0x05
    3a80:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    3a82:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    3a84:	8b 81       	ldd	r24, Y+3	; 0x03
    3a86:	9c 81       	ldd	r25, Y+4	; 0x04
    3a88:	ad 81       	ldd	r26, Y+5	; 0x05
    3a8a:	be 81       	ldd	r27, Y+6	; 0x06
    3a8c:	00 97       	sbiw	r24, 0x00	; 0
    3a8e:	a1 05       	cpc	r26, r1
    3a90:	b1 05       	cpc	r27, r1
    3a92:	89 f5       	brne	.+98     	; 0x3af6 <LCD_4_BitvidwriteInt+0xa4>
	{
		LCD_4_BitvidwriteCharacter('0');
    3a94:	80 e3       	ldi	r24, 0x30	; 48
    3a96:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_4_BitvidwriteCharacter>
    3a9a:	4d c0       	rjmp	.+154    	; 0x3b36 <LCD_4_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	08 2f       	mov	r16, r24
    3aa0:	10 e0       	ldi	r17, 0x00	; 0
    3aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa6:	ad 81       	ldd	r26, Y+5	; 0x05
    3aa8:	be 81       	ldd	r27, Y+6	; 0x06
    3aaa:	2a e0       	ldi	r18, 0x0A	; 10
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	50 e0       	ldi	r21, 0x00	; 0
    3ab2:	bc 01       	movw	r22, r24
    3ab4:	cd 01       	movw	r24, r26
    3ab6:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	28 2f       	mov	r18, r24
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	07 96       	adiw	r24, 0x07	; 7
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	e0 0f       	add	r30, r16
    3ac8:	f1 1f       	adc	r31, r17
    3aca:	20 83       	st	Z, r18
			temp/=10;
    3acc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ace:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ad2:	be 81       	ldd	r27, Y+6	; 0x06
    3ad4:	2a e0       	ldi	r18, 0x0A	; 10
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	bc 01       	movw	r22, r24
    3ade:	cd 01       	movw	r24, r26
    3ae0:	0e 94 14 20 	call	0x4028	; 0x4028 <__udivmodsi4>
    3ae4:	da 01       	movw	r26, r20
    3ae6:	c9 01       	movw	r24, r18
    3ae8:	8b 83       	std	Y+3, r24	; 0x03
    3aea:	9c 83       	std	Y+4, r25	; 0x04
    3aec:	ad 83       	std	Y+5, r26	; 0x05
    3aee:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	8f 5f       	subi	r24, 0xFF	; 255
    3af4:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_4_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	9c 81       	ldd	r25, Y+4	; 0x04
    3afa:	ad 81       	ldd	r26, Y+5	; 0x05
    3afc:	be 81       	ldd	r27, Y+6	; 0x06
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	a1 05       	cpc	r26, r1
    3b02:	b1 05       	cpc	r27, r1
    3b04:	59 f6       	brne	.-106    	; 0x3a9c <LCD_4_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3b06:	8a 81       	ldd	r24, Y+2	; 0x02
    3b08:	81 50       	subi	r24, 0x01	; 1
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    3b0c:	11 c0       	rjmp	.+34     	; 0x3b30 <LCD_4_BitvidwriteInt+0xde>
		{
			LCD_4_BitvidwriteCharacter(digit[i]+'0');
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	28 2f       	mov	r18, r24
    3b12:	33 27       	eor	r19, r19
    3b14:	27 fd       	sbrc	r18, 7
    3b16:	30 95       	com	r19
    3b18:	ce 01       	movw	r24, r28
    3b1a:	07 96       	adiw	r24, 0x07	; 7
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 0f       	add	r30, r18
    3b20:	f3 1f       	adc	r31, r19
    3b22:	80 81       	ld	r24, Z
    3b24:	80 5d       	subi	r24, 0xD0	; 208
    3b26:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_4_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	81 50       	subi	r24, 0x01	; 1
    3b2e:	89 83       	std	Y+1, r24	; 0x01
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	88 23       	and	r24, r24
    3b34:	64 f7       	brge	.-40     	; 0x3b0e <LCD_4_BitvidwriteInt+0xbc>
		{
			LCD_4_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    3b36:	61 96       	adiw	r28, 0x11	; 17
    3b38:	0f b6       	in	r0, 0x3f	; 63
    3b3a:	f8 94       	cli
    3b3c:	de bf       	out	0x3e, r29	; 62
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	cd bf       	out	0x3d, r28	; 61
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	08 95       	ret

00003b4c <KEYPAD_vidInit>:


extern u8 KEYPAD_u8aKeyPadMap_Calc[4][4];

void KEYPAD_vidInit(void)
{
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_ROW_1,INPUT);
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_ROW_2,INPUT);
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	61 e0       	ldi	r22, 0x01	; 1
    3b62:	40 e0       	ldi	r20, 0x00	; 0
    3b64:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_ROW_3,INPUT);
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	62 e0       	ldi	r22, 0x02	; 2
    3b6c:	40 e0       	ldi	r20, 0x00	; 0
    3b6e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_ROW_4,INPUT);
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	63 e0       	ldi	r22, 0x03	; 3
    3b76:	40 e0       	ldi	r20, 0x00	; 0
    3b78:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>

DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_ROW_1,HIGH);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	41 e0       	ldi	r20, 0x01	; 1
    3b82:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_ROW_2,HIGH);
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	61 e0       	ldi	r22, 0x01	; 1
    3b8a:	41 e0       	ldi	r20, 0x01	; 1
    3b8c:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_ROW_3,HIGH);
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	62 e0       	ldi	r22, 0x02	; 2
    3b94:	41 e0       	ldi	r20, 0x01	; 1
    3b96:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_ROW_4,HIGH);
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	63 e0       	ldi	r22, 0x03	; 3
    3b9e:	41 e0       	ldi	r20, 0x01	; 1
    3ba0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>

DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_COLUMN_1,OUTPUT);
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	64 e0       	ldi	r22, 0x04	; 4
    3ba8:	41 e0       	ldi	r20, 0x01	; 1
    3baa:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_COLUMN_2,OUTPUT);
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	65 e0       	ldi	r22, 0x05	; 5
    3bb2:	41 e0       	ldi	r20, 0x01	; 1
    3bb4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_COLUMN_3,OUTPUT);
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	66 e0       	ldi	r22, 0x06	; 6
    3bbc:	41 e0       	ldi	r20, 0x01	; 1
    3bbe:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>
DIO_u8setPinDirection(KEYPAD_PORT,KEYPAD_COLUMN_4,OUTPUT);
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	67 e0       	ldi	r22, 0x07	; 7
    3bc6:	41 e0       	ldi	r20, 0x01	; 1
    3bc8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>

DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_COLUMN_1,HIGH);
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	64 e0       	ldi	r22, 0x04	; 4
    3bd0:	41 e0       	ldi	r20, 0x01	; 1
    3bd2:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_COLUMN_2,HIGH);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	65 e0       	ldi	r22, 0x05	; 5
    3bda:	41 e0       	ldi	r20, 0x01	; 1
    3bdc:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_COLUMN_3,HIGH);
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	66 e0       	ldi	r22, 0x06	; 6
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
DIO_u8setPinValue(KEYPAD_PORT,KEYPAD_COLUMN_4,HIGH);
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	67 e0       	ldi	r22, 0x07	; 7
    3bee:	41 e0       	ldi	r20, 0x01	; 1
    3bf0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
}
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <KEYPAD_u8GetPressed>:
u8 KEYPAD_u8GetPressed(void)
{
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	a0 97       	sbiw	r28, 0x20	; 32
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
u8 Local_u8PressedSwitch = NOT_PRESSED ;
    3c0e:	1f 8e       	std	Y+31, r1	; 0x1f
u8 Local_u8CurrentCol;
u8 Local_u8CurrentRow;
u8 Local_u8CurrentRowStatus;
for(Local_u8CurrentCol = KEYPAD_COLUMN_START ;
    3c10:	84 e0       	ldi	r24, 0x04	; 4
    3c12:	8e 8f       	std	Y+30, r24	; 0x1e
    3c14:	27 c1       	rjmp	.+590    	; 0x3e64 <KEYPAD_u8GetPressed+0x26a>
		Local_u8CurrentCol<=KEYPAD_COLUMN_END ;
		Local_u8CurrentCol++ )
{
DIO_u8setPinValue(KEYPAD_PORT , Local_u8CurrentCol , LOW);
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
for(Local_u8CurrentRow = KEYPAD_ROW_START ;
    3c20:	1d 8e       	std	Y+29, r1	; 0x1d
    3c22:	14 c1       	rjmp	.+552    	; 0x3e4c <KEYPAD_u8GetPressed+0x252>
		Local_u8CurrentRow<=KEYPAD_ROW_END ;
		Local_u8CurrentRow++ )
{
DIO_u8getPinValue(KEYPAD_PORT , Local_u8CurrentRow ,& Local_u8CurrentRowStatus);
    3c24:	9e 01       	movw	r18, r28
    3c26:	20 5e       	subi	r18, 0xE0	; 224
    3c28:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3c2e:	a9 01       	movw	r20, r18
    3c30:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <DIO_u8getPinValue>
if(Local_u8CurrentRowStatus == LOW)
    3c34:	88 a1       	ldd	r24, Y+32	; 0x20
    3c36:	88 23       	and	r24, r24
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <KEYPAD_u8GetPressed+0x42>
    3c3a:	05 c1       	rjmp	.+522    	; 0x3e46 <KEYPAD_u8GetPressed+0x24c>
{
	Local_u8PressedSwitch = KEYPAD_u8aKeyPadMap_Calc[Local_u8CurrentRow-KEYPAD_ROW_START][Local_u8CurrentCol-KEYPAD_COLUMN_START] ;
    3c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c3e:	48 2f       	mov	r20, r24
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9c 01       	movw	r18, r24
    3c4a:	24 50       	subi	r18, 0x04	; 4
    3c4c:	30 40       	sbci	r19, 0x00	; 0
    3c4e:	ca 01       	movw	r24, r20
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	82 0f       	add	r24, r18
    3c5a:	93 1f       	adc	r25, r19
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	e7 57       	subi	r30, 0x77	; 119
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 81       	ld	r24, Z
    3c64:	8f 8f       	std	Y+31, r24	; 0x1f
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	a0 ea       	ldi	r26, 0xA0	; 160
    3c6c:	b0 e4       	ldi	r27, 0x40	; 64
    3c6e:	89 8f       	std	Y+25, r24	; 0x19
    3c70:	9a 8f       	std	Y+26, r25	; 0x1a
    3c72:	ab 8f       	std	Y+27, r26	; 0x1b
    3c74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c76:	69 8d       	ldd	r22, Y+25	; 0x19
    3c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	4a ef       	ldi	r20, 0xFA	; 250
    3c84:	54 e4       	ldi	r21, 0x44	; 68
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	8d 8b       	std	Y+21, r24	; 0x15
    3c90:	9e 8b       	std	Y+22, r25	; 0x16
    3c92:	af 8b       	std	Y+23, r26	; 0x17
    3c94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c96:	6d 89       	ldd	r22, Y+21	; 0x15
    3c98:	7e 89       	ldd	r23, Y+22	; 0x16
    3c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e8       	ldi	r20, 0x80	; 128
    3ca4:	5f e3       	ldi	r21, 0x3F	; 63
    3ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3caa:	88 23       	and	r24, r24
    3cac:	2c f4       	brge	.+10     	; 0x3cb8 <KEYPAD_u8GetPressed+0xbe>
		__ticks = 1;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9c 8b       	std	Y+20, r25	; 0x14
    3cb4:	8b 8b       	std	Y+19, r24	; 0x13
    3cb6:	3f c0       	rjmp	.+126    	; 0x3d36 <KEYPAD_u8GetPressed+0x13c>
	else if (__tmp > 65535)
    3cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cba:	7e 89       	ldd	r23, Y+22	; 0x16
    3cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	3f ef       	ldi	r19, 0xFF	; 255
    3cc4:	4f e7       	ldi	r20, 0x7F	; 127
    3cc6:	57 e4       	ldi	r21, 0x47	; 71
    3cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ccc:	18 16       	cp	r1, r24
    3cce:	4c f5       	brge	.+82     	; 0x3d22 <KEYPAD_u8GetPressed+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	69 8d       	ldd	r22, Y+25	; 0x19
    3cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e2       	ldi	r20, 0x20	; 32
    3cde:	51 e4       	ldi	r21, 0x41	; 65
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	cd 01       	movw	r24, r26
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9c 8b       	std	Y+20, r25	; 0x14
    3cf6:	8b 8b       	std	Y+19, r24	; 0x13
    3cf8:	0f c0       	rjmp	.+30     	; 0x3d18 <KEYPAD_u8GetPressed+0x11e>
    3cfa:	88 ec       	ldi	r24, 0xC8	; 200
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9a 8b       	std	Y+18, r25	; 0x12
    3d00:	89 8b       	std	Y+17, r24	; 0x11
    3d02:	89 89       	ldd	r24, Y+17	; 0x11
    3d04:	9a 89       	ldd	r25, Y+18	; 0x12
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <KEYPAD_u8GetPressed+0x10c>
    3d0a:	9a 8b       	std	Y+18, r25	; 0x12
    3d0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d10:	9c 89       	ldd	r25, Y+20	; 0x14
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	9c 8b       	std	Y+20, r25	; 0x14
    3d16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	8b 89       	ldd	r24, Y+19	; 0x13
    3d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	69 f7       	brne	.-38     	; 0x3cfa <KEYPAD_u8GetPressed+0x100>
    3d20:	1d c0       	rjmp	.+58     	; 0x3d5c <KEYPAD_u8GetPressed+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d22:	6d 89       	ldd	r22, Y+21	; 0x15
    3d24:	7e 89       	ldd	r23, Y+22	; 0x16
    3d26:	8f 89       	ldd	r24, Y+23	; 0x17
    3d28:	98 8d       	ldd	r25, Y+24	; 0x18
    3d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	9c 8b       	std	Y+20, r25	; 0x14
    3d34:	8b 8b       	std	Y+19, r24	; 0x13
    3d36:	8b 89       	ldd	r24, Y+19	; 0x13
    3d38:	9c 89       	ldd	r25, Y+20	; 0x14
    3d3a:	98 8b       	std	Y+16, r25	; 0x10
    3d3c:	8f 87       	std	Y+15, r24	; 0x0f
    3d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d40:	98 89       	ldd	r25, Y+16	; 0x10
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <KEYPAD_u8GetPressed+0x148>
    3d46:	98 8b       	std	Y+16, r25	; 0x10
    3d48:	8f 87       	std	Y+15, r24	; 0x0f
    3d4a:	08 c0       	rjmp	.+16     	; 0x3d5c <KEYPAD_u8GetPressed+0x162>

	_delay_ms(5);

	while(Local_u8CurrentRowStatus == LOW)
	{
		DIO_u8getPinValue(KEYPAD_PORT , Local_u8CurrentRow , & Local_u8CurrentRowStatus);
    3d4c:	9e 01       	movw	r18, r28
    3d4e:	20 5e       	subi	r18, 0xE0	; 224
    3d50:	3f 4f       	sbci	r19, 0xFF	; 255
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3d56:	a9 01       	movw	r20, r18
    3d58:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <DIO_u8getPinValue>
	Local_u8PressedSwitch = KEYPAD_u8aKeyPadMap_Calc[Local_u8CurrentRow-KEYPAD_ROW_START][Local_u8CurrentCol-KEYPAD_COLUMN_START] ;


	_delay_ms(5);

	while(Local_u8CurrentRowStatus == LOW)
    3d5c:	88 a1       	ldd	r24, Y+32	; 0x20
    3d5e:	88 23       	and	r24, r24
    3d60:	a9 f3       	breq	.-22     	; 0x3d4c <KEYPAD_u8GetPressed+0x152>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	a0 e2       	ldi	r26, 0x20	; 32
    3d68:	b1 e4       	ldi	r27, 0x41	; 65
    3d6a:	8b 87       	std	Y+11, r24	; 0x0b
    3d6c:	9c 87       	std	Y+12, r25	; 0x0c
    3d6e:	ad 87       	std	Y+13, r26	; 0x0d
    3d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	4a ef       	ldi	r20, 0xFA	; 250
    3d80:	54 e4       	ldi	r21, 0x44	; 68
    3d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	8f 83       	std	Y+7, r24	; 0x07
    3d8c:	98 87       	std	Y+8, r25	; 0x08
    3d8e:	a9 87       	std	Y+9, r26	; 0x09
    3d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d92:	6f 81       	ldd	r22, Y+7	; 0x07
    3d94:	78 85       	ldd	r23, Y+8	; 0x08
    3d96:	89 85       	ldd	r24, Y+9	; 0x09
    3d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e8       	ldi	r20, 0x80	; 128
    3da0:	5f e3       	ldi	r21, 0x3F	; 63
    3da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3da6:	88 23       	and	r24, r24
    3da8:	2c f4       	brge	.+10     	; 0x3db4 <KEYPAD_u8GetPressed+0x1ba>
		__ticks = 1;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	9e 83       	std	Y+6, r25	; 0x06
    3db0:	8d 83       	std	Y+5, r24	; 0x05
    3db2:	3f c0       	rjmp	.+126    	; 0x3e32 <KEYPAD_u8GetPressed+0x238>
	else if (__tmp > 65535)
    3db4:	6f 81       	ldd	r22, Y+7	; 0x07
    3db6:	78 85       	ldd	r23, Y+8	; 0x08
    3db8:	89 85       	ldd	r24, Y+9	; 0x09
    3dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	3f ef       	ldi	r19, 0xFF	; 255
    3dc0:	4f e7       	ldi	r20, 0x7F	; 127
    3dc2:	57 e4       	ldi	r21, 0x47	; 71
    3dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dc8:	18 16       	cp	r1, r24
    3dca:	4c f5       	brge	.+82     	; 0x3e1e <KEYPAD_u8GetPressed+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e2       	ldi	r20, 0x20	; 32
    3dda:	51 e4       	ldi	r21, 0x41	; 65
    3ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	9e 83       	std	Y+6, r25	; 0x06
    3df2:	8d 83       	std	Y+5, r24	; 0x05
    3df4:	0f c0       	rjmp	.+30     	; 0x3e14 <KEYPAD_u8GetPressed+0x21a>
    3df6:	88 ec       	ldi	r24, 0xC8	; 200
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9c 83       	std	Y+4, r25	; 0x04
    3dfc:	8b 83       	std	Y+3, r24	; 0x03
    3dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3e00:	9c 81       	ldd	r25, Y+4	; 0x04
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <KEYPAD_u8GetPressed+0x208>
    3e06:	9c 83       	std	Y+4, r25	; 0x04
    3e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	9e 83       	std	Y+6, r25	; 0x06
    3e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e14:	8d 81       	ldd	r24, Y+5	; 0x05
    3e16:	9e 81       	ldd	r25, Y+6	; 0x06
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	69 f7       	brne	.-38     	; 0x3df6 <KEYPAD_u8GetPressed+0x1fc>
    3e1c:	14 c0       	rjmp	.+40     	; 0x3e46 <KEYPAD_u8GetPressed+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e20:	78 85       	ldd	r23, Y+8	; 0x08
    3e22:	89 85       	ldd	r24, Y+9	; 0x09
    3e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	9e 81       	ldd	r25, Y+6	; 0x06
    3e36:	9a 83       	std	Y+2, r25	; 0x02
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <KEYPAD_u8GetPressed+0x244>
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
		Local_u8CurrentCol++ )
{
DIO_u8setPinValue(KEYPAD_PORT , Local_u8CurrentCol , LOW);
for(Local_u8CurrentRow = KEYPAD_ROW_START ;
		Local_u8CurrentRow<=KEYPAD_ROW_END ;
		Local_u8CurrentRow++ )
    3e46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e48:	8f 5f       	subi	r24, 0xFF	; 255
    3e4a:	8d 8f       	std	Y+29, r24	; 0x1d
		Local_u8CurrentCol<=KEYPAD_COLUMN_END ;
		Local_u8CurrentCol++ )
{
DIO_u8setPinValue(KEYPAD_PORT , Local_u8CurrentCol , LOW);
for(Local_u8CurrentRow = KEYPAD_ROW_START ;
		Local_u8CurrentRow<=KEYPAD_ROW_END ;
    3e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e4e:	84 30       	cpi	r24, 0x04	; 4
    3e50:	08 f4       	brcc	.+2      	; 0x3e54 <KEYPAD_u8GetPressed+0x25a>
    3e52:	e8 ce       	rjmp	.-560    	; 0x3c24 <KEYPAD_u8GetPressed+0x2a>
	_delay_ms(10);

}

}
DIO_u8setPinValue(KEYPAD_PORT , Local_u8CurrentCol , HIGH);
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
u8 Local_u8CurrentCol;
u8 Local_u8CurrentRow;
u8 Local_u8CurrentRowStatus;
for(Local_u8CurrentCol = KEYPAD_COLUMN_START ;
		Local_u8CurrentCol<=KEYPAD_COLUMN_END ;
		Local_u8CurrentCol++ )
    3e5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e60:	8f 5f       	subi	r24, 0xFF	; 255
    3e62:	8e 8f       	std	Y+30, r24	; 0x1e
u8 Local_u8PressedSwitch = NOT_PRESSED ;
u8 Local_u8CurrentCol;
u8 Local_u8CurrentRow;
u8 Local_u8CurrentRowStatus;
for(Local_u8CurrentCol = KEYPAD_COLUMN_START ;
		Local_u8CurrentCol<=KEYPAD_COLUMN_END ;
    3e64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e66:	88 30       	cpi	r24, 0x08	; 8
    3e68:	08 f4       	brcc	.+2      	; 0x3e6c <KEYPAD_u8GetPressed+0x272>
    3e6a:	d5 ce       	rjmp	.-598    	; 0x3c16 <KEYPAD_u8GetPressed+0x1c>

}
DIO_u8setPinValue(KEYPAD_PORT , Local_u8CurrentCol , HIGH);
}

return Local_u8PressedSwitch;
    3e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3e6e:	a0 96       	adiw	r28, 0x20	; 32
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	f8 94       	cli
    3e74:	de bf       	out	0x3e, r29	; 62
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	cd bf       	out	0x3d, r28	; 61
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret

00003e80 <Angles_PWM>:
//}



void Angles_PWM(void)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	00 d0       	rcall	.+0      	; 0x3e86 <Angles_PWM+0x6>
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8OVFCounter=0;
	Local_u8OVFCounter++;
    3e8a:	80 91 ab 00 	lds	r24, 0x00AB
    3e8e:	8f 5f       	subi	r24, 0xFF	; 255
    3e90:	80 93 ab 00 	sts	0x00AB, r24

	switch(global_u8Angles)
    3e94:	80 91 aa 00 	lds	r24, 0x00AA
    3e98:	28 2f       	mov	r18, r24
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	3a 83       	std	Y+2, r19	; 0x02
    3e9e:	29 83       	std	Y+1, r18	; 0x01
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea4:	81 30       	cpi	r24, 0x01	; 1
    3ea6:	91 05       	cpc	r25, r1
    3ea8:	51 f0       	breq	.+20     	; 0x3ebe <Angles_PWM+0x3e>
    3eaa:	29 81       	ldd	r18, Y+1	; 0x01
    3eac:	3a 81       	ldd	r19, Y+2	; 0x02
    3eae:	22 30       	cpi	r18, 0x02	; 2
    3eb0:	31 05       	cpc	r19, r1
    3eb2:	89 f1       	breq	.+98     	; 0x3f16 <Angles_PWM+0x96>
    3eb4:	89 81       	ldd	r24, Y+1	; 0x01
    3eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	b9 f0       	breq	.+46     	; 0x3eea <Angles_PWM+0x6a>
    3ebc:	41 c0       	rjmp	.+130    	; 0x3f40 <Angles_PWM+0xc0>
	{
	case Angle_90:
		if(Local_u8OVFCounter==2)
    3ebe:	80 91 ab 00 	lds	r24, 0x00AB
    3ec2:	82 30       	cpi	r24, 0x02	; 2
    3ec4:	31 f4       	brne	.+12     	; 0x3ed2 <Angles_PWM+0x52>
		{
			DIO_u8setPinValue(PORT_B,PIN_1,LOW);
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	61 e0       	ldi	r22, 0x01	; 1
    3eca:	40 e0       	ldi	r20, 0x00	; 0
    3ecc:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    3ed0:	37 c0       	rjmp	.+110    	; 0x3f40 <Angles_PWM+0xc0>
		}

		else if(Local_u8OVFCounter==20)
    3ed2:	80 91 ab 00 	lds	r24, 0x00AB
    3ed6:	84 31       	cpi	r24, 0x14	; 20
    3ed8:	99 f5       	brne	.+102    	; 0x3f40 <Angles_PWM+0xc0>
		{
			DIO_u8setPinValue(PORT_B,PIN_1,HIGH);
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	61 e0       	ldi	r22, 0x01	; 1
    3ede:	41 e0       	ldi	r20, 0x01	; 1
    3ee0:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
			Local_u8OVFCounter=0;
    3ee4:	10 92 ab 00 	sts	0x00AB, r1
    3ee8:	2b c0       	rjmp	.+86     	; 0x3f40 <Angles_PWM+0xc0>
		}
		break;
	case Init_Angle:
		if(Local_u8OVFCounter==6)
    3eea:	80 91 ab 00 	lds	r24, 0x00AB
    3eee:	86 30       	cpi	r24, 0x06	; 6
    3ef0:	31 f4       	brne	.+12     	; 0x3efe <Angles_PWM+0x7e>
		{
			DIO_u8setPinValue(PORT_B,PIN_1,LOW);
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	61 e0       	ldi	r22, 0x01	; 1
    3ef6:	40 e0       	ldi	r20, 0x00	; 0
    3ef8:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    3efc:	21 c0       	rjmp	.+66     	; 0x3f40 <Angles_PWM+0xc0>
		}

		else if(Local_u8OVFCounter==20)
    3efe:	80 91 ab 00 	lds	r24, 0x00AB
    3f02:	84 31       	cpi	r24, 0x14	; 20
    3f04:	e9 f4       	brne	.+58     	; 0x3f40 <Angles_PWM+0xc0>
		{
			DIO_u8setPinValue(PORT_B,PIN_1,HIGH);
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	61 e0       	ldi	r22, 0x01	; 1
    3f0a:	41 e0       	ldi	r20, 0x01	; 1
    3f0c:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
			Local_u8OVFCounter=0;
    3f10:	10 92 ab 00 	sts	0x00AB, r1
    3f14:	15 c0       	rjmp	.+42     	; 0x3f40 <Angles_PWM+0xc0>
		}
		break;
	case Angle_180:
		if(Local_u8OVFCounter==8)
    3f16:	80 91 ab 00 	lds	r24, 0x00AB
    3f1a:	88 30       	cpi	r24, 0x08	; 8
    3f1c:	31 f4       	brne	.+12     	; 0x3f2a <Angles_PWM+0xaa>
		{
			DIO_u8setPinValue(PORT_B,PIN_1,LOW);
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	61 e0       	ldi	r22, 0x01	; 1
    3f22:	40 e0       	ldi	r20, 0x00	; 0
    3f24:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
    3f28:	0b c0       	rjmp	.+22     	; 0x3f40 <Angles_PWM+0xc0>
		}

		else if(Local_u8OVFCounter==20)
    3f2a:	80 91 ab 00 	lds	r24, 0x00AB
    3f2e:	84 31       	cpi	r24, 0x14	; 20
    3f30:	39 f4       	brne	.+14     	; 0x3f40 <Angles_PWM+0xc0>
		{
			DIO_u8setPinValue(PORT_B,PIN_1,HIGH);
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	61 e0       	ldi	r22, 0x01	; 1
    3f36:	41 e0       	ldi	r20, 0x01	; 1
    3f38:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_u8setPinValue>
			Local_u8OVFCounter=0;
    3f3c:	10 92 ab 00 	sts	0x00AB, r1
		}
		break;
	}
}
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <main>:

void main (void)
{
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    3f52:	2e 97       	sbiw	r28, 0x0e	; 14
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
	u8 KeyValue = 0; //value[3] = {0};
    3f5e:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8setPinDirection(PORT_B,PIN_1,OUTPUT);
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	61 e0       	ldi	r22, 0x01	; 1
    3f64:	41 e0       	ldi	r20, 0x01	; 1
    3f66:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <DIO_u8setPinDirection>

	LCD_4_BitvidInit();
    3f6a:	0e 94 76 13 	call	0x26ec	; 0x26ec <LCD_4_BitvidInit>
	KEYPAD_vidInit();
    3f6e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <KEYPAD_vidInit>



	timer_config_type Servo_Angles;
	Servo_Angles.timer = TIMER_2;
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	8b 87       	std	Y+11, r24	; 0x0b
	Servo_Angles.operated_mode = NORMAL_MODE;
    3f76:	1a 86       	std	Y+10, r1	; 0x0a
	Servo_Angles.T2_used_freq = TIMER_2_PRE_SCALER_e_8;
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	89 87       	std	Y+9, r24	; 0x09
	Timer_init(&Servo_Angles);
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	02 96       	adiw	r24, 0x02	; 2
    3f80:	0e 94 97 08 	call	0x112e	; 0x112e <Timer_init>
	Set_CallBack_TIMER_2_OVF_INT(Angles_PWM);
    3f84:	80 e4       	ldi	r24, 0x40	; 64
    3f86:	9f e1       	ldi	r25, 0x1F	; 31
    3f88:	0e 94 05 08 	call	0x100a	; 0x100a <Set_CallBack_TIMER_2_OVF_INT>


	Global_VidINTEnable();
    3f8c:	0e 94 29 0c 	call	0x1852	; 0x1852 <Global_VidINTEnable>
	while(1)
	{

		KeyValue = KEYPAD_u8GetPressed();
    3f90:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <KEYPAD_u8GetPressed>
    3f94:	89 83       	std	Y+1, r24	; 0x01


		switch(KeyValue)
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	28 2f       	mov	r18, r24
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	3e 87       	std	Y+14, r19	; 0x0e
    3f9e:	2d 87       	std	Y+13, r18	; 0x0d
    3fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa4:	81 33       	cpi	r24, 0x31	; 49
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	59 f0       	breq	.+22     	; 0x3fc0 <main+0x76>
    3faa:	2d 85       	ldd	r18, Y+13	; 0x0d
    3fac:	3e 85       	ldd	r19, Y+14	; 0x0e
    3fae:	23 33       	cpi	r18, 0x33	; 51
    3fb0:	31 05       	cpc	r19, r1
    3fb2:	d9 f0       	breq	.+54     	; 0x3fea <main+0xa0>
    3fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb8:	80 33       	cpi	r24, 0x30	; 48
    3fba:	91 05       	cpc	r25, r1
    3fbc:	61 f0       	breq	.+24     	; 0x3fd6 <main+0x8c>
    3fbe:	e8 cf       	rjmp	.-48     	; 0x3f90 <main+0x46>
		{
		case'1':LCD_4_BitvidsendCommand(0b00000001); LCD_4_BitvidwriteString("ANGLE = 90"); global_u8Angles = Angle_90; break;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
    3fc6:	80 e6       	ldi	r24, 0x60	; 96
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 02 1c 	call	0x3804	; 0x3804 <LCD_4_BitvidwriteString>
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	80 93 aa 00 	sts	0x00AA, r24
    3fd4:	dd cf       	rjmp	.-70     	; 0x3f90 <main+0x46>
		case'0':LCD_4_BitvidsendCommand(0b00000001); LCD_4_BitvidwriteString("ANGLE = 0"); global_u8Angles = Init_Angle; break;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
    3fdc:	8b e6       	ldi	r24, 0x6B	; 107
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 02 1c 	call	0x3804	; 0x3804 <LCD_4_BitvidwriteString>
    3fe4:	10 92 aa 00 	sts	0x00AA, r1
    3fe8:	d3 cf       	rjmp	.-90     	; 0x3f90 <main+0x46>
		case'3':LCD_4_BitvidsendCommand(0b00000001); LCD_4_BitvidwriteString("ANGLE = 180"); global_u8Angles = Angle_180; break;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_4_BitvidsendCommand>
    3ff0:	85 e7       	ldi	r24, 0x75	; 117
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	0e 94 02 1c 	call	0x3804	; 0x3804 <LCD_4_BitvidwriteString>
    3ff8:	82 e0       	ldi	r24, 0x02	; 2
    3ffa:	80 93 aa 00 	sts	0x00AA, r24
    3ffe:	c8 cf       	rjmp	.-112    	; 0x3f90 <main+0x46>

00004000 <__udivmodhi4>:
    4000:	aa 1b       	sub	r26, r26
    4002:	bb 1b       	sub	r27, r27
    4004:	51 e1       	ldi	r21, 0x11	; 17
    4006:	07 c0       	rjmp	.+14     	; 0x4016 <__udivmodhi4_ep>

00004008 <__udivmodhi4_loop>:
    4008:	aa 1f       	adc	r26, r26
    400a:	bb 1f       	adc	r27, r27
    400c:	a6 17       	cp	r26, r22
    400e:	b7 07       	cpc	r27, r23
    4010:	10 f0       	brcs	.+4      	; 0x4016 <__udivmodhi4_ep>
    4012:	a6 1b       	sub	r26, r22
    4014:	b7 0b       	sbc	r27, r23

00004016 <__udivmodhi4_ep>:
    4016:	88 1f       	adc	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	5a 95       	dec	r21
    401c:	a9 f7       	brne	.-22     	; 0x4008 <__udivmodhi4_loop>
    401e:	80 95       	com	r24
    4020:	90 95       	com	r25
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	08 95       	ret

00004028 <__udivmodsi4>:
    4028:	a1 e2       	ldi	r26, 0x21	; 33
    402a:	1a 2e       	mov	r1, r26
    402c:	aa 1b       	sub	r26, r26
    402e:	bb 1b       	sub	r27, r27
    4030:	fd 01       	movw	r30, r26
    4032:	0d c0       	rjmp	.+26     	; 0x404e <__udivmodsi4_ep>

00004034 <__udivmodsi4_loop>:
    4034:	aa 1f       	adc	r26, r26
    4036:	bb 1f       	adc	r27, r27
    4038:	ee 1f       	adc	r30, r30
    403a:	ff 1f       	adc	r31, r31
    403c:	a2 17       	cp	r26, r18
    403e:	b3 07       	cpc	r27, r19
    4040:	e4 07       	cpc	r30, r20
    4042:	f5 07       	cpc	r31, r21
    4044:	20 f0       	brcs	.+8      	; 0x404e <__udivmodsi4_ep>
    4046:	a2 1b       	sub	r26, r18
    4048:	b3 0b       	sbc	r27, r19
    404a:	e4 0b       	sbc	r30, r20
    404c:	f5 0b       	sbc	r31, r21

0000404e <__udivmodsi4_ep>:
    404e:	66 1f       	adc	r22, r22
    4050:	77 1f       	adc	r23, r23
    4052:	88 1f       	adc	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	1a 94       	dec	r1
    4058:	69 f7       	brne	.-38     	; 0x4034 <__udivmodsi4_loop>
    405a:	60 95       	com	r22
    405c:	70 95       	com	r23
    405e:	80 95       	com	r24
    4060:	90 95       	com	r25
    4062:	9b 01       	movw	r18, r22
    4064:	ac 01       	movw	r20, r24
    4066:	bd 01       	movw	r22, r26
    4068:	cf 01       	movw	r24, r30
    406a:	08 95       	ret

0000406c <__prologue_saves__>:
    406c:	2f 92       	push	r2
    406e:	3f 92       	push	r3
    4070:	4f 92       	push	r4
    4072:	5f 92       	push	r5
    4074:	6f 92       	push	r6
    4076:	7f 92       	push	r7
    4078:	8f 92       	push	r8
    407a:	9f 92       	push	r9
    407c:	af 92       	push	r10
    407e:	bf 92       	push	r11
    4080:	cf 92       	push	r12
    4082:	df 92       	push	r13
    4084:	ef 92       	push	r14
    4086:	ff 92       	push	r15
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    4094:	ca 1b       	sub	r28, r26
    4096:	db 0b       	sbc	r29, r27
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	09 94       	ijmp

000040a4 <__epilogue_restores__>:
    40a4:	2a 88       	ldd	r2, Y+18	; 0x12
    40a6:	39 88       	ldd	r3, Y+17	; 0x11
    40a8:	48 88       	ldd	r4, Y+16	; 0x10
    40aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    40ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    40ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    40b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    40b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    40b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    40b6:	b9 84       	ldd	r11, Y+9	; 0x09
    40b8:	c8 84       	ldd	r12, Y+8	; 0x08
    40ba:	df 80       	ldd	r13, Y+7	; 0x07
    40bc:	ee 80       	ldd	r14, Y+6	; 0x06
    40be:	fd 80       	ldd	r15, Y+5	; 0x05
    40c0:	0c 81       	ldd	r16, Y+4	; 0x04
    40c2:	1b 81       	ldd	r17, Y+3	; 0x03
    40c4:	aa 81       	ldd	r26, Y+2	; 0x02
    40c6:	b9 81       	ldd	r27, Y+1	; 0x01
    40c8:	ce 0f       	add	r28, r30
    40ca:	d1 1d       	adc	r29, r1
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	ed 01       	movw	r28, r26
    40d8:	08 95       	ret

000040da <_exit>:
    40da:	f8 94       	cli

000040dc <__stop_program>:
    40dc:	ff cf       	rjmp	.-2      	; 0x40dc <__stop_program>
